Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: QUE

; Microsoft Dynamics AX Query : PayrollPretListPage_EnCours déchargé
; --------------------------------------------------------------------------------
VERSION 31

QUERY #PayrollPretListPage_EnCours
  PROPERTIES
    Name                #PayrollPretListPage_EnCours
    Version             #24
    NextUniqueId        #1001
    Origin              #{A9244E11-80EA-442D-8E9F-E8D868D4BFD5}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class QueryRun extends ObjectRun
      #{
      #}
    ENDSOURCE
  ENDMETHODS
  BLOCKS
    BLOCK #PayrollPret
      PROPERTIES
        Name                #PayrollPret_1
        Table               #PayrollPret
        UniqueId            #1000
        FetchMode           #1:1
      ENDPROPERTIES
      
      FIELDLIST
        PROPERTIES
          Dynamic             #No
        ENDPROPERTIES
        
        FIELD #DateOctroit
        FIELD #DatePremiereEcheance
        FIELD #HcmWorker
        FIELD #MatriculePret
        FIELD #Montant
        FIELD #MontantAmorti
        FIELD #MontantRestant
        FIELD #NbEcheances
        FIELD #PayrollPretEtablissementPayeur
        FIELD #PayrollPretObjet
        FIELD #PayrollPretType
        FIELD #Status
        FIELD #TauxInteret
      ENDFIELDLIST
      SORTING
      ENDSORTING
      LINES
        LINE #Status
        PROPERTIES
          Name                #Status
          Table               #PayrollPret
          Field               #Status
          Value               #EnCours
        ENDPROPERTIES
        
      ENDLINES
      BLOCKS
      ENDBLOCKS
      GROUPBY
      ENDGROUPBY
      HAVING
      ENDHAVING
      ORDERBY
      ENDORDERBY
    ENDBLOCK
  ENDBLOCKS
  DEPENDENTS
  ENDDEPENDENTS
  COMPOSITEQUERIES
  ENDCOMPOSITEQUERIES
ENDQUERY


***Element: QUE

; Microsoft Dynamics AX Query : PayrollPretListPage_Arrete déchargé
; --------------------------------------------------------------------------------
VERSION 31

QUERY #PayrollPretListPage_Arrete
  PROPERTIES
    Name                #PayrollPretListPage_Arrete
    Version             #24
    NextUniqueId        #1002
    Origin              #{58717930-DAED-4267-80D3-F54CC0ADC44B}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class QueryRun extends ObjectRun
      #{
      #}
    ENDSOURCE
  ENDMETHODS
  BLOCKS
    BLOCK #PayrollPret
      PROPERTIES
        Name                #PayrollPret_1
        Table               #PayrollPret
        UniqueId            #1001
        FetchMode           #1:1
      ENDPROPERTIES
      
      FIELDLIST
        PROPERTIES
          Dynamic             #No
        ENDPROPERTIES
        
        FIELD #DateOctroit
        FIELD #DatePremiereEcheance
        FIELD #HcmWorker
        FIELD #MatriculePret
        FIELD #Montant
        FIELD #MontantAmorti
        FIELD #MontantRestant
        FIELD #NbEcheances
        FIELD #PayrollPretEtablissementPayeur
        FIELD #PayrollPretObjet
        FIELD #PayrollPretType
        FIELD #Status
        FIELD #TauxInteret
      ENDFIELDLIST
      SORTING
      ENDSORTING
      LINES
        LINE #Status
        PROPERTIES
          Name                #Status
          Table               #PayrollPret
          Field               #Status
          Value               #Arrete
        ENDPROPERTIES
        
      ENDLINES
      BLOCKS
      ENDBLOCKS
      GROUPBY
      ENDGROUPBY
      HAVING
      ENDHAVING
      ORDERBY
      ENDORDERBY
    ENDBLOCK
  ENDBLOCKS
  DEPENDENTS
  ENDDEPENDENTS
  COMPOSITEQUERIES
  ENDCOMPOSITEQUERIES
ENDQUERY


***Element: QUE

; Microsoft Dynamics AX Query : PayrollPretListPage_solde déchargé
; --------------------------------------------------------------------------------
VERSION 31

QUERY #PayrollPretListPage_solde
  PROPERTIES
    Name                #PayrollPretListPage_solde
    Version             #21
    NextUniqueId        #1001
    Origin              #{B66AD0C7-CB2F-431C-AF27-0D261F67111A}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class QueryRun extends ObjectRun
      #{
      #}
    ENDSOURCE
  ENDMETHODS
  BLOCKS
    BLOCK #PayrollPret
      PROPERTIES
        Name                #PayrollPret_1
        Table               #PayrollPret
        UniqueId            #1000
        FetchMode           #1:1
      ENDPROPERTIES
      
      FIELDLIST
        PROPERTIES
          Dynamic             #No
        ENDPROPERTIES
        
        FIELD #DateOctroit
        FIELD #DatePremiereEcheance
        FIELD #HcmWorker
        FIELD #MatriculePret
        FIELD #Montant
        FIELD #MontantAmorti
        FIELD #MontantRestant
        FIELD #NbEcheances
        FIELD #PayrollPretEtablissementPayeur
        FIELD #PayrollPretObjet
        FIELD #PayrollPretType
        FIELD #Status
        FIELD #TauxInteret
      ENDFIELDLIST
      SORTING
      ENDSORTING
      LINES
        LINE #Status
        PROPERTIES
          Name                #Status
          Table               #PayrollPret
          Field               #Status
          Value               #Solde
        ENDPROPERTIES
        
      ENDLINES
      BLOCKS
      ENDBLOCKS
      GROUPBY
      ENDGROUPBY
      HAVING
      ENDHAVING
      ORDERBY
      ENDORDERBY
    ENDBLOCK
  ENDBLOCKS
  DEPENDENTS
  ENDDEPENDENTS
  COMPOSITEQUERIES
  ENDCOMPOSITEQUERIES
ENDQUERY


***Element: QUE

; Microsoft Dynamics AX Query : PayrollPretInfo déchargé
; --------------------------------------------------------------------------------
VERSION 31

QUERY #PayrollPretInfo
  PROPERTIES
    Name                #PayrollPretInfo
    Version             #18
    NextUniqueId        #1001
    Origin              #{4F6406EB-C6B3-4423-A132-FFCBBCC92DE5}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class QueryRun extends ObjectRun
      #{
      #}
    ENDSOURCE
  ENDMETHODS
  BLOCKS
    BLOCK #PayrollPret
      PROPERTIES
        Name                #PayrollPret_1
        Table               #PayrollPret
        UniqueId            #1000
        FetchMode           #1:1
      ENDPROPERTIES
      
      FIELDLIST
        PROPERTIES
          Dynamic             #No
        ENDPROPERTIES
        
        FIELD #HcmWorker
        FIELD #Montant
        FIELD #MontantAmorti
        FIELD #MontantRestant
        FIELD #Status
        FIELD #TauxInteret
        FIELD #NbEcheances
        FIELD #DateOctroit
        FIELD #DatePremiereEcheance
        FIELD #PayrollPretEtablissementPayeur
        FIELD #PayrollPretObjet
        FIELD #PayrollPretType
        FIELD #Status
      ENDFIELDLIST
      SORTING
      ENDSORTING
      LINES
      ENDLINES
      BLOCKS
      ENDBLOCKS
      GROUPBY
      ENDGROUPBY
      HAVING
      ENDHAVING
      ORDERBY
      ENDORDERBY
    ENDBLOCK
  ENDBLOCKS
  DEPENDENTS
  ENDDEPENDENTS
  COMPOSITEQUERIES
  ENDCOMPOSITEQUERIES
ENDQUERY


***Element: IPA

; Microsoft Dynamics AX Info Part : PayrollPret déchargé
; --------------------------------------------------------------------------------
VERSION 4

INFOPART #PayrollPret
  PROPERTIES
    Name                #PayrollPret
    Caption             #Prêt
    Query               #PayrollPretInfo
    Origin              #{7CDE51AC-C04A-4E1D-BC79-EC02DABAB35A}
  ENDPROPERTIES
  
  INFOPARTLAYOUT
    PROPERTIES
      ShowMore            #No
    ENDPROPERTIES
    
    INFOPARTGROUP #Pret
      PROPERTIES
        Name                #Pret
        ElementPosition     #1073741823
      ENDPROPERTIES
      
      INFOPARTFIELD #HcmWorker
        PROPERTIES
          Name                #HcmWorker
          DataSource          #PayrollPret_1
          DataField           #HcmWorker
          Style               #TitleField
          ElementPosition     #238609294
        ENDPROPERTIES
        
      ENDINFOPARTFIELD
      
      INFOPARTFIELD #DateOctroit
        PROPERTIES
          Name                #DateOctroit
          DataSource          #PayrollPret_1
          DataField           #DateOctroit
          ElementPosition     #477218588
        ENDPROPERTIES
        
      ENDINFOPARTFIELD
      
      INFOPARTFIELD #DatePremiereEcheance
        PROPERTIES
          Name                #DatePremiereEcheance
          DataSource          #PayrollPret_1
          DataField           #DatePremiereEcheance
          ElementPosition     #715827882
        ENDPROPERTIES
        
      ENDINFOPARTFIELD
      
      INFOPARTFIELD #Montant
        PROPERTIES
          Name                #Montant
          DataSource          #PayrollPret_1
          DataField           #Montant
          ElementPosition     #954437176
        ENDPROPERTIES
        
      ENDINFOPARTFIELD
      
      INFOPARTFIELD #MontantAmorti
        PROPERTIES
          Name                #MontantAmorti
          DataSource          #PayrollPret_1
          DataField           #MontantAmorti
          ElementPosition     #1193046470
        ENDPROPERTIES
        
      ENDINFOPARTFIELD
      
      INFOPARTFIELD #MontantRestant
        PROPERTIES
          Name                #MontantRestant
          DataSource          #PayrollPret_1
          DataField           #MontantRestant
          ElementPosition     #1431655764
        ENDPROPERTIES
        
      ENDINFOPARTFIELD
      
      INFOPARTFIELD #Taux
        PROPERTIES
          Name                #Taux
          DataSource          #PayrollPret_1
          DataField           #TauxInteret
          ElementPosition     #1670265058
        ENDPROPERTIES
        
      ENDINFOPARTFIELD
      
      INFOPARTFIELD #NbEchances
        PROPERTIES
          Name                #NbEchances
          DataSource          #PayrollPret_1
          DataField           #NbEcheances
          ElementPosition     #1908874352
        ENDPROPERTIES
        
      ENDINFOPARTFIELD
      
    ENDINFOPARTGROUP
    
  ENDINFOPARTLAYOUT
  
  INFOPARTACTIONLIST
  ENDINFOPARTACTIONLIST
  
  PERMISSIONSET #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ENDPERMISSIONSET

ENDINFOPART


***Element: MNU

; Microsoft Dynamics AX Menu : Payroll unloaded
; --------------------------------------------------------------------------------
  MNUVERSION 5
  
  MENU #Payroll
    PROPERTIES
      Name                #Payroll
      Label               #@GLS92169
      ConfigurationKey    #Payroll
      SetCompany          #Yes
      NormalImage         #10767
      ImageLocation       #EmbeddedResource
      Origin              #{100A0000-0000-1000-B435-DC606179726F}
    ENDPROPERTIES
    
    MENU #@SYS333846
      PROPERTIES
        Name                #CommonTasks
        Label               #@SYS333846
      ENDPROPERTIES
      
      MENU #@SYS303638
        PROPERTIES
          Name                #HcmWorkerListPage
          Label               #@SYS303638
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Collaborateurs
            MenuItemName        #HcmWorkerListPage
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Employés
            MenuItemName        #HcmWorkerListPage_Employees
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Fournisseurs
            MenuItemName        #HcmWorkerListPage_Contractors
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Anciens collaborateurs
            MenuItemName        #HcmWorkerListPage_PastWorkers
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Collaborateurs en attente
            MenuItemName        #HcmWorkerListPage_PendingWorkers
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@SYS119629
        PROPERTIES
          Name                #HcmPositionList
          Label               #@SYS119629
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Postes
            MenuItemName        #HcmPositionList
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Postes vacants
            MenuItemName        #HcmPositionList_Open
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@GLS93418
        PROPERTIES
          Name                #EarningsStatements
          Label               #@GLS93418
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Earnings statements
            MenuItemName        #PayrollEarningsStatementListPage
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Released earnings statements
            MenuItemName        #PayrollEarningsStatementListReleased
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Processed earnings statements
            MenuItemName        #PayrollEarningsStatementListProcessed
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Earnings statements on hold
            MenuItemName        #PayrollEarningsStatementListOnHold
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Earnings statements not processed
            MenuItemName        #PayrollEarningsStatementListNotProcessed
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@GLS93949
        PROPERTIES
          Name                #PayrollPayStatements
          Label               #@GLS93949
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #All pay statements
            MenuItemName        #PayrollPayStatementListPage
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Calculated pay statements
            MenuItemName        #PayrollPayStatementCalculated
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Pay statements to recalculate
            MenuItemName        #PayrollPayStatementRecalculate
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Submitted pay statements
            MenuItemName        #PayrollPayStatementSubmitted
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Issued pay statements
            MenuItemName        #PayrollPayStatementIssued
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #Prêts
        PROPERTIES
          Name                #Pret
          Label               #Prêts
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Tout les prêts
            MenuItemName        #PayrollPretListPage
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Prêts en cours
            MenuItemName        #payrollpretlistpage_encours
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Prêts soldés
            MenuItemName        #payrollpretlistpage_soldes
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Prêts arrêtés
            MenuItemName        #payrollpretlistpage_arretes
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
    ENDMENU
    MENU #@SYS3850
      PROPERTIES
        Name                #@SYS3850
        Label               #@SYS3850
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Earnings statement lines
          MenuItemName        #PayrollEarningStatemeLineInquiry
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Pay statement earnings
          MenuItemName        #PayrollPayStatemeEarningLineInquiry
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Pay statement benefit amounts
          MenuItemName        #PayrollPayStatemeBenefitLineInquiry
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Tax transaction history summary
          MenuItemName        #PrlUSTaxTransactionHistory
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Tax transaction history detail
          MenuItemName        #PrlUSTaxTransactionHistoryDetail
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Form W-2 box adjustments
          MenuItemName        #PayrollFormW2BoxReportingAdjustment
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Worker arrears
          MenuItemName        #PRLDeductionArrearInquiry
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Worker benefit and deduction setup
          MenuItemName        #PayrollWorkerEnrolledBenefitInquiry
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Benefit accrual balances
          MenuItemName        #PayrollWorkerEnrolledAccrualInquiry
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Benefit accrual transactions
          MenuItemName        #PayrollAccrualTransactionsInquiry
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Résumé du fichier de paiement positif de la paie
          MenuItemName        #PayrollPositivePayTableInquiry
        ENDPROPERTIES
        
      ENDMENUITEM
    ENDMENU
    MENU #@SYS7800
      PROPERTIES
        Name                #@SYS7800
        Label               #@SYS7800
      ENDPROPERTIES
      
      MENUITEM
        PROPERTIES
          Name                #Pay statements
          MenuItemType        #Output
          MenuItemName        #PayrollPayStatementReport
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Benefit register
          MenuItemType        #Output
          MenuItemName        #PayrollBenefitRegister
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Worker payment register
          MenuItemType        #Output
          MenuItemName        #PayrollWorkerPaymentRegister
        ENDPROPERTIES
        
      ENDMENUITEM
      MENU #@SYS28668
        PROPERTIES
          Name                #TaxReports
          Label               #@SYS28668
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Tax register
            MenuItemType        #Output
            MenuItemName        #PayrollUSTaxTransactionHistory
          ENDPROPERTIES
          
        ENDMENUITEM
        MENU #@SYP4470146
          PROPERTIES
            Name                #QuarterlyReports
            Label               #@SYP4470146
            CountryRegionCodes  #US
          ENDPROPERTIES
          
          MENUITEM
            PROPERTIES
              Name                #Form 941 preparation
              MenuItemType        #Output
              MenuItemName        #PayrollEmplQuarterFedTax
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #State quarterly wage and tax preparation
              MenuItemType        #Output
              MenuItemName        #PayrollStateWageTaxPrepReport
            ENDPROPERTIES
            
          ENDMENUITEM
        ENDMENU
        MENU #@SYP4470151
          PROPERTIES
            Name                #AnnualReports
            Label               #@SYP4470151
            CountryRegionCodes  #US
          ENDPROPERTIES
          
          MENUITEM
            PROPERTIES
              Name                #Form 940 preparation
              MenuItemType        #Output
              MenuItemName        #PayrollUnemploymentTaxReturnPrepReport
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #Form W-2 reconciliation
              MenuItemType        #Output
              MenuItemName        #PayrollW2Reconciliation
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #Form W-2
              MenuItemType        #Output
              MenuItemName        #PayrollW2Report
            ENDPROPERTIES
            
          ENDMENUITEM
          MENUITEM
            PROPERTIES
              Name                #Electronic Form W-2
              MenuItemType        #Action
              MenuItemName        #PayrollW2File
            ENDPROPERTIES
            
          ENDMENUITEM
        ENDMENU
      ENDMENU
    ENDMENU
    MENU #@SYS8782
      PROPERTIES
        Name                #@SYS8782
        Label               #@SYS8782
      ENDPROPERTIES
      
      MENU #@SYS4090004
        PROPERTIES
          Name                #EarningProcessing
          Label               #@SYS4090004
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Generate earnings
            MenuItemType        #Action
            MenuItemName        #PayrollEarningGeneration
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Release earnings statement
            MenuItemType        #Action
            MenuItemName        #PayrollEarningsStatementsReleased
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Hold earnings statement
            MenuItemType        #Action
            MenuItemName        #PayrollEarningsStatementsOnHold
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@SYS4090005
        PROPERTIES
          Name                #PayStatementProcessing
          Label               #@SYS4090005
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Generate pay statements
            MenuItemType        #Action
            MenuItemName        #PayrollPaystatementGeneration
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Submit pay statements
            MenuItemType        #Action
            MenuItemName        #PayrollIssueWorkerPayProcess
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Payment journal
            MenuItemName        #LedgerJournalTablePayrollDisbursement
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Post pay statements
            MenuItemType        #Action
            MenuItemName        #PayrollPayStatementPost
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Generate vendor invoices
            MenuItemType        #Action
            MenuItemName        #PayrollPayStatementGenerateVendorInvoice
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Paiement positif de la paie
            MenuItemType        #Action
            MenuItemName        #PayrollPositivePayGenerate
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
    ENDMENU
    MENU #@SYS26269
      PROPERTIES
        Name                #Setup
        Label               #@SYS26269
      ENDPROPERTIES
      
      MENU #@SYS331707
        PROPERTIES
          Name                #Parameters
          Label               #@SYS331707
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Payroll parameters
            MenuItemName        #PRLParameter
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Paramètres partagés de ressources humaines
            MenuItemName        #HcmSharedParameters
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Paramétrage abattements
            MenuItemName        #PayrollMontantsAbattement
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Baréme IRPP
            MenuItemName        #PayrollBaremeIRPP
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Détails des abattements
            MenuItemName        #hcmworkerabattementsDetails
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Bulletins Models
            MenuItemName        #PayrollBulletinModel
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Pourcentage assurance groupe
            MenuItemName        #payrollpourcentageAssuranceGroupe
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENUITEM
        PROPERTIES
          Name                #Pay cycles and pay periods
          MenuItemName        #PayrollPayCycle
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Payroll calculation frequencies
          MenuItemName        #PayrollCalculationFrequency
        ENDPROPERTIES
        
      ENDMENUITEM
      MENUITEM
        PROPERTIES
          Name                #Earning codes
          MenuItemName        #PayrollEarningCode
        ENDPROPERTIES
        
      ENDMENUITEM
      MENU #@GLS91646
        PROPERTIES
          Name                #TaxSetup
          Label               #@GLS91646
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Tax codes
            MenuItemName        #PayrollTaxCode
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Tax groups
            MenuItemName        #PayrollTaxGroup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Tax regions
            MenuItemName        #PayrollTaxRegion
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Employer tax regions
            MenuItemName        #PayrollEmployerTaxRegion
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Update tax data
            MenuItemType        #Action
            MenuItemName        #PayrollUpdateBaseTaxData
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@SYS315743
        PROPERTIES
          Name                #BenefitsSetup
          Label               #@SYS315743
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Détails des avantages
            MenuItemName        #HcmBenefitElementSetup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Avantages
            MenuItemName        #HcmBenefitList
            IsDisplayedInContentArea    #Yes
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Contribution calculation rates
            MenuItemName        #PayrollBenefitCalculationRateSetup
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Disposable income definition
            MenuItemName        #PayrollDisposableIncome
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Benefit accrual plans
            MenuItemName        #PayrollAccrual
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Régimes CNSS
            MenuItemName        #PayrollRegimesCNSS
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Paramétres des régimes CNSS
            MenuItemName        #PayrollRegimesCNSSAvantages
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #@SYS21838
        PROPERTIES
          Name                #SchedulingSetup
          Label               #@SYS21838
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Modèles de temps de travail
            MenuItemName        #WorkTimeTable
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Calendriers
            MenuItemName        #WorkCalendarTable
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
      MENU #Prêts
        PROPERTIES
          Name                #Submenu1
          Label               #Prêts
        ENDPROPERTIES
        
        MENUITEM
          PROPERTIES
            Name                #Types de prêts
            MenuItemName        #PayrollPretType
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Objets de prêts
            MenuItemName        #PayrollPretObjet
          ENDPROPERTIES
          
        ENDMENUITEM
        MENUITEM
          PROPERTIES
            Name                #Etablissements payeurs
            MenuItemName        #PayrollPretEtablissementPayeur
          ENDPROPERTIES
          
        ENDMENUITEM
      ENDMENU
    ENDMENU
  ENDMENU
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : PayrollPretListPage_Soldes unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #PayrollPretListPage_Soldes
    Type: 1
    PROPERTIES
      Name                #PayrollPretListPage_Soldes
      Label               #Prêts soldés
      HelpText            #Liste des prêt(s) soldé(s)
      Object              #payrollPretListPage
      OpenMode            #View
      Query               #payrollpretlistpage_solde
      Origin              #{85F531A8-7B50-4196-AB88-0E9ED2F0BCCB}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : PayrollPretListPage_EnCours unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #PayrollPretListPage_EnCours
    Type: 1
    PROPERTIES
      Name                #PayrollPretListPage_EnCours
      Label               #Prêts en cours
      HelpText            #Liste de(s) prêt(s) en cours
      Object              #payrollpretlistPage
      EnumTypeParameter   #PayrollPretStatus
      Query               #payrollPretListpage_enCours
      Origin              #{40136E26-93B8-4FE0-A1A5-A4203861B9AC}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : PayrollPretListPage_Arretes unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #PayrollPretListPage_Arretes
    Type: 1
    PROPERTIES
      Name                #PayrollPretListPage_Arretes
      Label               #Prêts arrêtés
      HelpText            #Liste des prê(s) arrêté(s)
      Object              #payrollpretlistPage
      EnumTypeParameter   #PayrollPretStatus
      EnumParameter       #Arrete
      Query               #PayrollPretListPage_Arrete
      Origin              #{16ACBA31-FC1E-491E-8E83-6EC53CC0E8AC}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : PayrollPretInfos unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #PayrollPretInfos
    Type: 1
    PROPERTIES
      Name                #PayrollPretInfos
      Label               #Prêt
      ObjectType          #InfoPart
      Object              #PayrollPret
      Origin              #{9742D8AB-7462-4A5A-98BE-40E4ED7DBE4F}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : PayrollPretEdit unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #PayrollPretEdit
    Type: 1
    PROPERTIES
      Name                #PayrollPretEdit
      Object              #PayrollPretEdit
      Origin              #{F4BFC79A-81CC-4DD1-AB0E-573654CBAC2D}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : PayrollPretView unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #PayrollPretView
    Type: 1
    PROPERTIES
      Name                #PayrollPretView
      Label               #Prêt
      Object              #PayrollTabAmortissement
      Origin              #{5B5814AF-A617-49D0-A2D3-8A91D0E1E2DF}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : PayrollPret unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #PayrollPret
    Type: 1
    PROPERTIES
      Name                #PayrollPret
      Label               #Prêt
      Object              #PayrollPret
      Origin              #{CC65D825-6CAD-4F16-9EED-71225801668A}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : PayrollPretListPage unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #PayrollPretListPage
    Type: 1
    PROPERTIES
      Name                #PayrollPretListPage
      Label               #Tout les prêts
      Object              #PayrollPretListPage
      Origin              #{50B938E8-FE32-4B06-9F57-B81A3E56C71C}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : PayrollPretEtablissementPayeur unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #PayrollPretEtablissementPayeur
    Type: 1
    PROPERTIES
      Name                #PayrollPretEtablissementPayeur
      Label               #Etablissements payeurs
      Object              #PayrollPretEtablissementPayeur
      Origin              #{984C8384-F8DF-4B17-BD3F-AC9DD4087103}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : PayrollPretObjet unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #PayrollPretObjet
    Type: 1
    PROPERTIES
      Name                #PayrollPretObjet
      Label               #Objets de prêts
      Object              #PayrollPretObjet
      OpenMode            #New
      Origin              #{F22CDD4C-5925-45BF-9095-15822146EF50}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: FTM

; Microsoft Dynamics AX MENUITEM : PayrollPretType unloaded
; --------------------------------------------------------------------------------
  VERSION 1
  
  MENUITEM #PayrollPretType
    Type: 1
    PROPERTIES
      Name                #PayrollPretType
      Label               #Types de prêts
      Object              #PayrollPretType
      Origin              #{BF2106EF-2A60-4D33-9B68-DAF58EBB65A8}
    ENDPROPERTIES
    
  ENDMENUITEM
  

***Element: DBT

; Microsoft Dynamics AX Table : PayrollPret unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #PayrollPret
    EnforceFKRelation 1
    PROPERTIES
      Name                #PayrollPret
      TitleField1         #MatriculePret
      CreateRecIdIndex    #Yes
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      ReplacementKey      #PretIdx
      Origin              #{FC921282-CDD8-4D9E-BCF2-D46181BB7EFF}
    ENDPROPERTIES
    
    FIELDS
      FIELD #DateOctroit
        DATETIME
        PROPERTIES
          Name                #DateOctroit
          Label               #Date d'octroit
          Mandatory           #Yes
          Table               #PayrollPret
          Origin              #{9C4CA6BF-2FB1-4767-8DC0-1FF7BBA3919F}
        ENDPROPERTIES
        
      FIELD #DatePremiereEcheance
        DATETIME
        PROPERTIES
          Name                #DatePremiereEcheance
          Label               #Date de 1ére échéance
          Mandatory           #Yes
          Table               #PayrollPret
          Origin              #{A1BB1F8A-B860-450A-9422-77A68862400B}
        ENDPROPERTIES
        
      FIELD #HcmWorker
        INT64
        PROPERTIES
          Name                #HcmWorker
          Label               #Collaborateur
          Mandatory           #Yes
          Table               #PayrollPret
          Origin              #{8F021DBD-0864-4288-BED3-9BE28CAA8DC5}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #MatriculePret
        STRING
        PROPERTIES
          Name                #MatriculePret
          Label               #Matricule
          Table               #PayrollPret
          Origin              #{3CFA9F5C-0EDA-464D-A77C-2E513C31F6B4}
          ExtendedDataType    #PayrollPretId
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #Montant
        REAL
        PROPERTIES
          Name                #Montant
          Mandatory           #Yes
          Table               #PayrollPret
          Origin              #{D2BD7FCC-44E1-4938-8B1E-147563D0334E}
        ENDPROPERTIES
        
      FIELD #MontantAmorti
        REAL
        PROPERTIES
          Name                #MontantAmorti
          Label               #Montant amorti
          Table               #PayrollPret
          Origin              #{65DEE837-851F-44A6-800F-5F2A2C77D671}
        ENDPROPERTIES
        
      FIELD #MontantRestant
        REAL
        PROPERTIES
          Name                #MontantRestant
          Label               #Montant restant dû
          Table               #PayrollPret
          Origin              #{780860B2-EFA5-44E1-87D2-AC4109685127}
        ENDPROPERTIES
        
      FIELD #NbEcheances
        INT
        PROPERTIES
          Name                #NbEcheances
          Label               #Nombre d'échéances
          Mandatory           #Yes
          Table               #PayrollPret
          Origin              #{BFC1A63C-4E4C-4F17-98F4-2551F1B26476}
        ENDPROPERTIES
        
      FIELD #PayrollPretEtablissementPayeur
        INT64
        PROPERTIES
          Name                #PayrollPretEtablissementPayeur
          Label               #Etablissement payeur
          Table               #PayrollPret
          Origin              #{30FB613A-E50A-40E8-908F-A6519F8C03A8}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #PayrollPretObjet
        INT64
        PROPERTIES
          Name                #PayrollPretObjet
          Label               #Objet
          Table               #PayrollPret
          Origin              #{E5C8F039-710F-451F-BCAC-64319EB1060C}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #PayrollPretType
        INT64
        PROPERTIES
          Name                #PayrollPretType
          Label               #Type
          HelpText            #Type de prêt
          MinReadAccess       #Yes
          Table               #PayrollPret
          Origin              #{2AD30D21-9296-4F44-8B05-2A11B5E9EE60}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #Status
        ENUM
        PROPERTIES
          Name                #Status
          Label               #Etat
          Table               #PayrollPret
          Origin              #{771CCCF5-06A8-41FB-893C-EA9BD583500B}
          EnumType            #PayrollPretStatus
        ENDPROPERTIES
        
      FIELD #TauxInteret
        REAL
        PROPERTIES
          Name                #TauxInteret
          Label               #Taux d'interêt
          Table               #PayrollPret
          Origin              #{61CF11CA-E89B-4230-BC3A-CEC967B780B6}
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoIdentification
        PROPERTIES
          Name                #AutoIdentification
        ENDPROPERTIES
        
        GROUPFIELDS
          #MatriculePret
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #PretIdx
      PROPERTIES
        Name                #PretIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{58342CDA-EF9D-4BC9-896D-EE22DDC15D96}
      ENDPROPERTIES
      
      INDEXFIELDS
        #MatriculePret
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #EtablissementPayeur_FK
        PROPERTIES
          Name                #EtablissementPayeur_FK
          Table               #PayrollPretEtablissementPayeur
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PayrollPretEtablissementPayeur
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #HcmWorker_FK
        PROPERTIES
          Name                #HcmWorker_FK
          Table               #HcmWorker
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #OneMore
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #HcmWorker
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ObjetPret_FK
        PROPERTIES
          Name                #ObjetPret_FK
          Table               #PayrollPretObjet
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PayrollPretObjet
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TypePret_FK
        PROPERTIES
          Name                #TypePret_FK
          Table               #PayrollPretType
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PayrollPretType
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
      #PayrollPretAmortissements(Pret)
      PROPERTIES
        Table               #PayrollPretAmortissements
        DeleteAction        #Cascade
        Relation            #Pret
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #annuite
        # public real annuite(real _capitalDu, real _interet, int _nbEcheances)
        #{
        #
        #
        #  _interet = _interet/100;
        #
        #  return   _capitalDu * (_interet/12) / ( 1 - power( ( 1 + _interet/12 ) , (- _nbEcheances ) ) )  ;
        #
        #
        #}
      ENDSOURCE
      SOURCE #createEchancier
        #private void createEchancier()
        #{
        #
        #    //Non utilisé pour le moment
        #
        #    int i  ;
        #    PayrollPretAmortissements payrollPretAmortissements;
        #    utcDateTime dateEcheance = this.DatePremiereEcheance ;
        #    real capitalDu  =  this.Montant ,
        #    capitalAmorti  ,
        #    totalAmortit ,
        #    annuite  ,
        #    interet  ;
        #    RecordSortedList echeancier;//liste des echances à inserrer
        #
        #    echeancier = new RecordSortedList(tableNum(PayrollPretAmortissements));
        #    echeancier.sortOrder(fieldNum(payrollPretAmortissements,Numero));
        #
        #
        #    if(this.DatePremiereEcheance >= this.DateOctroit || this.Montant != 0)
        #    {
        #
        #    this.MontantRestant = this.Montant ;
        #    if( this.TauxInteret == 0 )
        #    {
        #
        #        for( i=0 ; i < this.NbEcheances ; i++ ) // sans taux d'interet
        #    {
        #    capitalAmorti = this.Montant / this.NbEcheances ;
        #    payrollPretAmortissements.Numero = i + 1 ;
        #    payrollPretAmortissements.PayrollPret = this.RecId ;
        #    payrollPretAmortissements.Date = dateEcheance;
        #    payrollPretAmortissements.isPayed = NoYes :: No;
        #    dateEcheance = DateTimeUtil::addMonths(dateEcheance,1);
        #    payrollPretAmortissements.CapitalDu = capitalDu;
        #    payrollPretAmortissements.CapitalAmorti = capitalAmorti ;
        #    capitalDu = capitalDu - capitalAmorti ;
        #    totalAmortit = totalAmortit + capitalAmorti ;
        #    payrollPretAmortissements.CapitalRetDu = capitalDu ;
        #    payrollPretAmortissements.Annuite = capitalAmorti ;
        #    payrollPretAmortissements.TotalAmorti = totalAmortit ;
        #    echeancier.ins(payrollPretAmortissements);
        #     }
        #   }
        #   else
        #            // avec taux d'interet
        #    {
        #        annuite = this.annuite(capitalDu,this.TauxInteret,this.NbEcheances);
        #        for( i=0 ; i < this.NbEcheances ; i++ )
        #        {
        #        payrollPretAmortissements.Numero = i + 1 ;
        #        payrollPretAmortissements.PayrollPret = this.RecId ;
        #        PayrollPretAmortissements.Date = dateEcheance;
        #        dateEcheance = DateTimeUtil::addMonths(dateEcheance,1);
        #        payrollPretAmortissements.isPayed = NoYes :: No ;
        #        payrollPretAmortissements.CapitalDu = capitalDu ;
        #        payrollPretAmortissements.Annuite = annuite ;
        #        interet = PayrollPretCalculateEcheancier::interet( capitalDu , this.TauxInteret);
        #        payrollPretAmortissements.Interet = interet ;
        #        payrollPretAmortissements.CapitalAmorti = annuite - interet ;
        #        PayrollPretAmortissements.CapitalRetDu = capitalDu - ( annuite - interet ) ;
        #        totalAmortit += ( annuite - interet ) ;
        #        payrollPretAmortissements.TotalAmorti = totalAmortit ;
        #        capitalDu -= ( annuite - interet ) ;
        #        echeancier.ins(payrollPretAmortissements);
        #        }
        #    }
        #
        #        // insertion
        #        echeancier.insertDatabase();
        #
        #
        #
        #
        #    }
        # }
        #
        #
      ENDSOURCE
      SOURCE #delete
        #public void delete()
        #{
        #    super();
        #}
      ENDSOURCE
      SOURCE #displayPretStatusImage
        #public display ImageRes displayPretStatusImage()
        #{
        #    #resAppl
        #    ImageRes imageRes = 0;
        #
        #    switch (this.Status)
        #    {
        #        case PayrollPretStatus::Arrete:
        #            imageRes = #Image_Warning;
        #            break;
        #
        #        case PayrollPretStatus::EnCours:
        #            imageRes = #SentToPaymentJournal;
        #            break;
        #
        #        case PayrollPretStatus::Solde:
        #            imageRes = #PaymentIssued;
        #            break;
        #
        #        default:
        #            break;
        #    }
        #
        #    return imageRes;
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    this.MatriculePret = NumberSeq::newGetNum(PayrollPret::numRefMatPret(),true).num();
        #    this.MontantRestant = this.Montant;
        #    super();
        #    this.createEchancier();
        #}
      ENDSOURCE
      SOURCE #numRefMatPret
        #static client server NumberSequenceReference numRefMatPret()
        #
        #{
        #
        #    return NumberSeqReference::findReference(extendedTypeNum(PayrollPretId));
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: UTS

; Microsoft Dynamics AX String : PayrollPretId déchargé
; --------------------------------------------------------------------------------
  USERTYPEVERSION 6
  
  USERTYPE #PayrollPretId
  STRING
    PROPERTIES
      Name                #PayrollPretId
      Label               #Matricule
      HelpText            #Matricule
      Origin              #{759BE60E-9FCA-41B1-8CF4-6EBA7F83E14C}
      ReferenceTable      #PayrollPret
      StringSize          #15
    ENDPROPERTIES
    
    TYPEELEMENTS
    ENDTYPEELEMENTS
    
    TYPEREFERENCES
    ENDTYPEREFERENCES
    
    TYPELOOKUPS
      TYPELOOKUP LOOKUP
      PROPERTIES
        Table               #PayrollPret
        RelatedField        #MatriculePret
      ENDPROPERTIES
      
    ENDTYPELOOKUPS
    
  ENDUSERTYPE
  

***Element: DBT

; Microsoft Dynamics AX Table : PayrollPretAmortissements unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #PayrollPretAmortissements
    EnforceFKRelation 1
    PROPERTIES
      Name                #PayrollPretAmortissements
      CreateRecIdIndex    #Yes
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      Origin              #{CE707C4C-D0B8-491F-8E90-FB3A3C4C0AEC}
    ENDPROPERTIES
    
    FIELDS
      FIELD #Annuite
        REAL
        PROPERTIES
          Name                #Annuite
          Label               #Annuité
          Table               #PayrollPretAmortissements
          Origin              #{C8C13469-3EAA-451C-9ADA-952BF728F3E8}
        ENDPROPERTIES
        
      FIELD #CapitalAmorti
        REAL
        PROPERTIES
          Name                #CapitalAmorti
          Label               #Capital amorti
          Table               #PayrollPretAmortissements
          Origin              #{BFF566FA-14C7-4EB2-AF8F-4CFF7E2C7C08}
        ENDPROPERTIES
        
      FIELD #CapitalDu
        REAL
        PROPERTIES
          Name                #CapitalDu
          Label               #Capital dû
          Table               #PayrollPretAmortissements
          Origin              #{2A251C72-E8F4-45AB-9A63-03B1B50014E1}
        ENDPROPERTIES
        
      FIELD #CapitalRetDu
        REAL
        PROPERTIES
          Name                #CapitalRetDu
          Label               #Capital ret dû
          Table               #PayrollPretAmortissements
          Origin              #{A748059F-3D7A-4A18-91C9-AF7B817F5DA6}
        ENDPROPERTIES
        
      FIELD #Date
        DATETIME
        PROPERTIES
          Name                #Date
          Table               #PayrollPretAmortissements
          Origin              #{99718122-D0E5-475E-8717-B915C4352807}
        ENDPROPERTIES
        
      FIELD #Interet
        REAL
        PROPERTIES
          Name                #Interet
          Label               #Intérêt
          Table               #PayrollPretAmortissements
          Origin              #{F5326F3B-8DD8-4795-8623-1C3C1BE1D32F}
        ENDPROPERTIES
        
      FIELD #isPayed
        ENUM
        PROPERTIES
          Name                #isPayed
          Label               #Encaissé
          Table               #PayrollPretAmortissements
          Origin              #{F5C89001-F114-4A3A-98D2-45AD02B0615A}
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #isRembourse
        ENUM
        PROPERTIES
          Name                #isRembourse
          Table               #PayrollPretAmortissements
          Origin              #{8B935529-FC5E-4D81-B46F-6AD9561E10C5}
          EnumType            #NoYes
        ENDPROPERTIES
        
      FIELD #Numero
        INT
        PROPERTIES
          Name                #Numero
          Label               #Numéro
          AllowEdit           #No
          Table               #PayrollPretAmortissements
          Origin              #{12032A07-BF8F-42AE-9321-5285244DFF3D}
        ENDPROPERTIES
        
      FIELD #PayrollPret
        INT64
        PROPERTIES
          Name                #PayrollPret
          Table               #PayrollPretAmortissements
          Origin              #{1966B43A-97F8-4431-9BDF-DCA84F36CF71}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #TotalAmorti
        REAL
        PROPERTIES
          Name                #TotalAmorti
          Label               #Total amorti
          Table               #PayrollPretAmortissements
          Origin              #{6AB44582-6D9A-4577-9DDB-63DBE04051BF}
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
    ENDGROUPS
    
    INDICES
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #Pret
        PROPERTIES
          Name                #Pret
          Table               #PayrollPret
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #OneMore
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PayrollPret
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : PayrollPret unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #PayrollPret
    EnforceFKRelation 1
    PROPERTIES
      Name                #PayrollPret
      TitleField1         #MatriculePret
      CreateRecIdIndex    #Yes
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      ReplacementKey      #PretIdx
      Origin              #{FC921282-CDD8-4D9E-BCF2-D46181BB7EFF}
    ENDPROPERTIES
    
    FIELDS
      FIELD #DateOctroit
        DATETIME
        PROPERTIES
          Name                #DateOctroit
          Label               #Date d'octroit
          Mandatory           #Yes
          Table               #PayrollPret
          Origin              #{9C4CA6BF-2FB1-4767-8DC0-1FF7BBA3919F}
        ENDPROPERTIES
        
      FIELD #DatePremiereEcheance
        DATETIME
        PROPERTIES
          Name                #DatePremiereEcheance
          Label               #Date de 1ére échéance
          Mandatory           #Yes
          Table               #PayrollPret
          Origin              #{A1BB1F8A-B860-450A-9422-77A68862400B}
        ENDPROPERTIES
        
      FIELD #HcmWorker
        INT64
        PROPERTIES
          Name                #HcmWorker
          Label               #Collaborateur
          Mandatory           #Yes
          Table               #PayrollPret
          Origin              #{8F021DBD-0864-4288-BED3-9BE28CAA8DC5}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #MatriculePret
        STRING
        PROPERTIES
          Name                #MatriculePret
          Label               #Matricule
          Table               #PayrollPret
          Origin              #{3CFA9F5C-0EDA-464D-A77C-2E513C31F6B4}
          ExtendedDataType    #PayrollPretId
          StringSize          #15
        ENDPROPERTIES
        
      FIELD #Montant
        REAL
        PROPERTIES
          Name                #Montant
          Mandatory           #Yes
          Table               #PayrollPret
          Origin              #{D2BD7FCC-44E1-4938-8B1E-147563D0334E}
        ENDPROPERTIES
        
      FIELD #MontantAmorti
        REAL
        PROPERTIES
          Name                #MontantAmorti
          Label               #Montant amorti
          Table               #PayrollPret
          Origin              #{65DEE837-851F-44A6-800F-5F2A2C77D671}
        ENDPROPERTIES
        
      FIELD #MontantRestant
        REAL
        PROPERTIES
          Name                #MontantRestant
          Label               #Montant restant dû
          Table               #PayrollPret
          Origin              #{780860B2-EFA5-44E1-87D2-AC4109685127}
        ENDPROPERTIES
        
      FIELD #NbEcheances
        INT
        PROPERTIES
          Name                #NbEcheances
          Label               #Nombre d'échéances
          Mandatory           #Yes
          Table               #PayrollPret
          Origin              #{BFC1A63C-4E4C-4F17-98F4-2551F1B26476}
        ENDPROPERTIES
        
      FIELD #PayrollPretEtablissementPayeur
        INT64
        PROPERTIES
          Name                #PayrollPretEtablissementPayeur
          Label               #Etablissement payeur
          Table               #PayrollPret
          Origin              #{30FB613A-E50A-40E8-908F-A6519F8C03A8}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #PayrollPretObjet
        INT64
        PROPERTIES
          Name                #PayrollPretObjet
          Label               #Objet
          Table               #PayrollPret
          Origin              #{E5C8F039-710F-451F-BCAC-64319EB1060C}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #PayrollPretType
        INT64
        PROPERTIES
          Name                #PayrollPretType
          Label               #Type
          HelpText            #Type de prêt
          MinReadAccess       #Yes
          Table               #PayrollPret
          Origin              #{2AD30D21-9296-4F44-8B05-2A11B5E9EE60}
          ExtendedDataType    #RefRecId
        ENDPROPERTIES
        
      FIELD #Status
        ENUM
        PROPERTIES
          Name                #Status
          Label               #Etat
          Table               #PayrollPret
          Origin              #{771CCCF5-06A8-41FB-893C-EA9BD583500B}
          EnumType            #PayrollPretStatus
        ENDPROPERTIES
        
      FIELD #TauxInteret
        REAL
        PROPERTIES
          Name                #TauxInteret
          Label               #Taux d'interêt
          Table               #PayrollPret
          Origin              #{61CF11CA-E89B-4230-BC3A-CEC967B780B6}
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoIdentification
        PROPERTIES
          Name                #AutoIdentification
        ENDPROPERTIES
        
        GROUPFIELDS
          #MatriculePret
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #PretIdx
      PROPERTIES
        Name                #PretIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{58342CDA-EF9D-4BC9-896D-EE22DDC15D96}
      ENDPROPERTIES
      
      INDEXFIELDS
        #MatriculePret
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
      REFERENCE #EtablissementPayeur_FK
        PROPERTIES
          Name                #EtablissementPayeur_FK
          Table               #PayrollPretEtablissementPayeur
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PayrollPretEtablissementPayeur
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #HcmWorker_FK
        PROPERTIES
          Name                #HcmWorker_FK
          Table               #HcmWorker
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #OneMore
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #HcmWorker
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #ObjetPret_FK
        PROPERTIES
          Name                #ObjetPret_FK
          Table               #PayrollPretObjet
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PayrollPretObjet
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
      REFERENCE #TypePret_FK
        PROPERTIES
          Name                #TypePret_FK
          Table               #PayrollPretType
          RelatedTableCardinality   #ExactlyOne
          Cardinality         #ZeroMore
          UseDefaultRoleNames #Yes
        ENDPROPERTIES
        
        FIELDREFERENCES
          REFERENCETYPE PKFK
          PROPERTIES
            Field               #PayrollPretType
            RelatedField        #RecId
          ENDPROPERTIES
          
        ENDFIELDREFERENCES
      ENDREFERENCE
    ENDREFERENCES
    
    DELETEACTIONS
      #PayrollPretAmortissements(Pret)
      PROPERTIES
        Table               #PayrollPretAmortissements
        DeleteAction        #Cascade
        Relation            #Pret
      ENDPROPERTIES
      
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #annuite
        # public real annuite(real _capitalDu, real _interet, int _nbEcheances)
        #{
        #
        #
        #  _interet = _interet/100;
        #
        #  return   _capitalDu * (_interet/12) / ( 1 - power( ( 1 + _interet/12 ) , (- _nbEcheances ) ) )  ;
        #
        #
        #}
      ENDSOURCE
      SOURCE #createEchancier
        #private void createEchancier()
        #{
        #
        #    //Non utilisé pour le moment
        #
        #    int i  ;
        #    PayrollPretAmortissements payrollPretAmortissements;
        #    utcDateTime dateEcheance = this.DatePremiereEcheance ;
        #    real capitalDu  =  this.Montant ,
        #    capitalAmorti  ,
        #    totalAmortit ,
        #    annuite  ,
        #    interet  ;
        #    RecordSortedList echeancier;//liste des echances à inserrer
        #
        #    echeancier = new RecordSortedList(tableNum(PayrollPretAmortissements));
        #    echeancier.sortOrder(fieldNum(payrollPretAmortissements,Numero));
        #
        #
        #    if(this.DatePremiereEcheance >= this.DateOctroit || this.Montant != 0)
        #    {
        #
        #    this.MontantRestant = this.Montant ;
        #    if( this.TauxInteret == 0 )
        #    {
        #
        #        for( i=0 ; i < this.NbEcheances ; i++ ) // sans taux d'interet
        #    {
        #    capitalAmorti = this.Montant / this.NbEcheances ;
        #    payrollPretAmortissements.Numero = i + 1 ;
        #    payrollPretAmortissements.PayrollPret = this.RecId ;
        #    payrollPretAmortissements.Date = dateEcheance;
        #    payrollPretAmortissements.isPayed = NoYes :: No;
        #    dateEcheance = DateTimeUtil::addMonths(dateEcheance,1);
        #    payrollPretAmortissements.CapitalDu = capitalDu;
        #    payrollPretAmortissements.CapitalAmorti = capitalAmorti ;
        #    capitalDu = capitalDu - capitalAmorti ;
        #    totalAmortit = totalAmortit + capitalAmorti ;
        #    payrollPretAmortissements.CapitalRetDu = capitalDu ;
        #    payrollPretAmortissements.Annuite = capitalAmorti ;
        #    payrollPretAmortissements.TotalAmorti = totalAmortit ;
        #    echeancier.ins(payrollPretAmortissements);
        #     }
        #   }
        #   else
        #            // avec taux d'interet
        #    {
        #        annuite = this.annuite(capitalDu,this.TauxInteret,this.NbEcheances);
        #        for( i=0 ; i < this.NbEcheances ; i++ )
        #        {
        #        payrollPretAmortissements.Numero = i + 1 ;
        #        payrollPretAmortissements.PayrollPret = this.RecId ;
        #        PayrollPretAmortissements.Date = dateEcheance;
        #        dateEcheance = DateTimeUtil::addMonths(dateEcheance,1);
        #        payrollPretAmortissements.isPayed = NoYes :: No ;
        #        payrollPretAmortissements.CapitalDu = capitalDu ;
        #        payrollPretAmortissements.Annuite = annuite ;
        #        interet = PayrollPretCalculateEcheancier::interet( capitalDu , this.TauxInteret);
        #        payrollPretAmortissements.Interet = interet ;
        #        payrollPretAmortissements.CapitalAmorti = annuite - interet ;
        #        PayrollPretAmortissements.CapitalRetDu = capitalDu - ( annuite - interet ) ;
        #        totalAmortit += ( annuite - interet ) ;
        #        payrollPretAmortissements.TotalAmorti = totalAmortit ;
        #        capitalDu -= ( annuite - interet ) ;
        #        echeancier.ins(payrollPretAmortissements);
        #        }
        #    }
        #
        #        // insertion
        #        echeancier.insertDatabase();
        #
        #
        #
        #
        #    }
        # }
        #
        #
      ENDSOURCE
      SOURCE #delete
        #public void delete()
        #{
        #    super();
        #}
      ENDSOURCE
      SOURCE #displayPretStatusImage
        #public display ImageRes displayPretStatusImage()
        #{
        #    #resAppl
        #    ImageRes imageRes = 0;
        #
        #    switch (this.Status)
        #    {
        #        case PayrollPretStatus::Arrete:
        #            imageRes = #Image_Warning;
        #            break;
        #
        #        case PayrollPretStatus::EnCours:
        #            imageRes = #SentToPaymentJournal;
        #            break;
        #
        #        case PayrollPretStatus::Solde:
        #            imageRes = #PaymentIssued;
        #            break;
        #
        #        default:
        #            break;
        #    }
        #
        #    return imageRes;
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    this.MatriculePret = NumberSeq::newGetNum(PayrollPret::numRefMatPret(),true).num();
        #    this.MontantRestant = this.Montant;
        #    super();
        #    this.createEchancier();
        #}
      ENDSOURCE
      SOURCE #numRefMatPret
        #static client server NumberSequenceReference numRefMatPret()
        #
        #{
        #
        #    return NumberSeqReference::findReference(extendedTypeNum(PayrollPretId));
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : PayrollPretEtablissementPayeur unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #PayrollPretEtablissementPayeur
    EnforceFKRelation 1
    PROPERTIES
      Name                #PayrollPretEtablissementPayeur
      TitleField1         #Code
      TitleField2         #Intitule
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      ReplacementKey      #PretEtablissementPayeurIdx
      Origin              #{0B9A0F29-BFD8-4A42-8041-E4E891FD2670}
    ENDPROPERTIES
    
    FIELDS
      FIELD #Code
        STRING
        PROPERTIES
          Name                #Code
          HelpText            #Intitulé
          Table               #PayrollPretEtablissementPayeur
          Origin              #{12DE824D-33DE-42BF-896E-192FBEB89A45}
        ENDPROPERTIES
        
      FIELD #Intitule
        STRING
        PROPERTIES
          Name                #Intitule
          Table               #PayrollPretEtablissementPayeur
          Origin              #{62A720A0-C89E-49C5-8476-A291AB0D3442}
          StringSize          #40
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoIdentification
        PROPERTIES
          Name                #AutoIdentification
        ENDPROPERTIES
        
        GROUPFIELDS
          #Code
          #Intitule
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #PretEtablissementPayeurIdx
      PROPERTIES
        Name                #PretEtablissementPayeurIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{AE67C7AE-9D12-4223-AF13-D4B1A25F07A8}
      ENDPROPERTIES
      
      INDEXFIELDS
        #Code
        #Intitule
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : PayrollPretObjet unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #PayrollPretObjet
    EnforceFKRelation 1
    PROPERTIES
      Name                #PayrollPretObjet
      TitleField1         #Code
      TitleField2         #Intitule
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      ReplacementKey      #PretObjectIdx
      Origin              #{CA404B65-9CD6-404E-948A-C6AF26F8FE27}
    ENDPROPERTIES
    
    FIELDS
      FIELD #Code
        STRING
        PROPERTIES
          Name                #Code
          Table               #PayrollPretObjet
          Origin              #{CF3D047E-AE45-4521-BE1D-19FECB9CB6A5}
        ENDPROPERTIES
        
      FIELD #Intitule
        STRING
        PROPERTIES
          Name                #Intitule
          Label               #Intitulé
          Table               #PayrollPretObjet
          Origin              #{8CE17FA9-3AF0-4EE5-92F5-BCA46FDEBC93}
          StringSize          #40
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoIdentification
        PROPERTIES
          Name                #AutoIdentification
        ENDPROPERTIES
        
        GROUPFIELDS
          #Code
          #Intitule
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #PretObjectIdx
      PROPERTIES
        Name                #PretObjectIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{B32508AB-1966-4C86-BFC0-77B9124F23A6}
      ENDPROPERTIES
      
      INDEXFIELDS
        #Code
        #Intitule
      ENDINDEXFIELDS
      
      #Index1
      PROPERTIES
        Name                #Index1
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{0E0551A8-A910-4D1C-9A81-24F36D13C9FA}
      ENDPROPERTIES
      
      INDEXFIELDS
        #Intitule
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
    ENDMETHODS
  ENDTABLE
  

***Element: DBT

; Microsoft Dynamics AX Table : PayrollPretType unloaded
; --------------------------------------------------------------------------------
  TABLEVERSION 1
  
  TABLE #PayrollPretType
    EnforceFKRelation 1
    PROPERTIES
      Name                #PayrollPretType
      TitleField1         #Code
      TitleField2         #Intitule
      CreateRecIdIndex    #Yes
      SaveDataPerCompany  #No
      PrimaryIndex        #SurrogateKey
      ClusterIndex        #SurrogateKey
      ReplacementKey      #PretTypeIdx
      Origin              #{E540FC2B-28A7-462C-A55E-C81AC8737A08}
    ENDPROPERTIES
    
    FIELDS
      FIELD #Code
        STRING
        PROPERTIES
          Name                #Code
          Table               #PayrollPretType
          Origin              #{A12AC139-3ED0-4EF5-8359-B37305F18566}
        ENDPROPERTIES
        
      FIELD #Intitule
        STRING
        PROPERTIES
          Name                #Intitule
          Label               #Intitulé
          Table               #PayrollPretType
          Origin              #{F3E1545F-0E44-4444-B15D-854011F57078}
          StringSize          #40
        ENDPROPERTIES
        
    ENDFIELDS
    GROUPS
      GROUP #AutoIdentification
        PROPERTIES
          Name                #AutoIdentification
        ENDPROPERTIES
        
        GROUPFIELDS
          #Code
          #Intitule
        ENDGROUPFIELDS
      ENDGROUP
    ENDGROUPS
    
    INDICES
      #PretTypeIdx
      PROPERTIES
        Name                #PretTypeIdx
        AllowDuplicates     #No
        AlternateKey        #Yes
        Origin              #{5C3B4129-6686-4087-974E-8BC97EA40F2D}
      ENDPROPERTIES
      
      INDEXFIELDS
        #Code
        #Intitule
      ENDINDEXFIELDS
      
    ENDINDICES
    FULLTEXTINDICES
    ENDFULLTEXTINDICES
    REFERENCES
    ENDREFERENCES
    
    DELETEACTIONS
    ENDDELETEACTIONS
    
    METHODS
      SOURCE #delete
        #public void delete()
        #{
        #    super();
        #}
      ENDSOURCE
      SOURCE #insert
        #public void insert()
        #{
        #    super();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDTABLE
  

***Element: JOB

; Microsoft Dynamics AX Job : insertTaxTN déchargé
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #insertTaxTN
    #static void insertTaxTN(Args _args)
    #{
    #    PayrollTaxCode tax;
    #    tax.Code = "IRPP";
    #    tax.Description = "Impôt sur le revenu des personnes physiques";
    #    tax.CountryRegionId ="TUN";
    #    tax.insert();
    #    tax.clear();
    #    tax.Code = "RED";
    #    tax.Description = "Redevance";
    #    tax.CountryRegionId ="TUN";
    #    tax.insert();
    #    tax.clear();
    #    tax.Code = "FOPROLOS";
    #    tax.Description = "Fonds de Promotion de Logements Sociaux";
    #    tax.CountryRegionId ="TUN";
    #    tax.insert();
    #    tax.clear();
    #    tax.Code = "TFP";
    #    tax.Description = "Taxe à la Formation Professionnelle";
    #    tax.CountryRegionId ="TUN";
    #    tax.insert();
    #    tax.clear();
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{F51138B1-B63E-4699-8860-63608486E287}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job : CreerReferenceSouche déchargé
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #CreerReferenceSouche
    #static void CreerReferenceSouche(Args _args)
    #{
    #    NumberSeqModulePayroll NumberSeqModulePayroll = new NumberSeqModulePayroll();
    #    ;
    #    NumberSeqModulePayroll.load();
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{69F37DB9-EF2C-4191-A404-8B7166A5AFF7}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job : clearpret déchargé
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #clearpret
    #static void clearpret(Args _args)
    #{
    #PayrollPret ppp;
    #while select forUpdate ppp
    #    {ttsBegin;
    #    ppp.delete();
    #    ttsCommit;
    #    }
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{E6591550-1703-4B0E-A6C3-ABB40E69DAF1}
  ENDPROPERTIES
  

***Element: CLS

; Microsoft Dynamics AX Class : PayrollPretCalculateEcheancier déchargé
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #PayrollPretCalculateEcheancier
    PROPERTIES
      Name                #PayrollPretCalculateEcheancier
      Origin              #{FEE53AF0-0826-467E-B5D3-58666B31A352}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #class PayrollPretCalculateEcheancier
        #{
        #}
      ENDSOURCE
      SOURCE #annuite
        # static public real annuite(real _capitalDu, real _interet, int _nbEcheances)
        #{
        #
        #
        #  _interet = _interet/100;
        #
        #  return   _capitalDu * (_interet/12) / ( 1 - power( ( 1 + _interet/12 ) , (- _nbEcheances ) ) )  ;
        #
        #
        #}
      ENDSOURCE
      SOURCE #interet
        #static public real interet( real _capitalDu, real _interet )
        #{
        #
        #
        #    _interet = _interet /100 ;
        #
        #   return   _capitalDu * (_interet / 12) ;
        #
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class : PayrollPayStatementGenerationTask déchargé
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #PayrollPayStatementGenerationTask
    PROPERTIES
      Name                #PayrollPayStatementGenerationTask
      Extends             #RunBaseBatch
      Origin              #{2D210000-0000-1000-B662-C8859F587FD2}
    ENDPROPERTIES
    
    METHODS
      SOURCE #appliquerEcheancePret
        #private void appliquerEcheancePret(PayrollPayStatement _payrollPayStatement)
        #{
        #   utcDateTime StartPay;
        #   utcDateTime EndPay;
        #   TimeOfDay timeInUserTimeZone;
        #   select PeriodStartDate,PeriodEndDate from payrollPayPeriod
        #   where payrollPayPeriod.RecId == _payrollPayStatement.PayPeriod;
        #
        #   StartPay  =  DateTimeUtil::newDateTime(payrollPayPeriod.PeriodStartDate, timeInUserTimeZone, DateTimeUtil::getUserPreferredTimeZone());
        #   EndPay    =  DateTimeUtil::newDateTime(payrollPayPeriod.PeriodEndDate, timeInUserTimeZone, DateTimeUtil::getUserPreferredTimeZone());
        #
        #   // selection des prêts
        #
        #   while
        #
        #   select  forUpdate payrollPret
        #   where payrollPret.HcmWorker == _payrollPayStatement.Worker
        #      && payrollPret.Status == PayrollPretStatus :: EnCours
        #
        #   {
        #   // selection de l'echeance
        #   select  forUpdate payrollPretAmortissements
        #    where payrollPretAmortissements.PayrollPret == payrollPret.RecId
        #      && payrollPretAmortissements.Date >= StartPay
        #      && payrollPretAmortissements.Date <= EndPay
        #      && payrollPretAmortissements.isPayed == NoYes::No
        #      && payrollPretAmortissements.isRembourse == NoYes::No;
        #
        #   if(payrollPretAmortissements)
        #   {
        #   //retrait
        #   payStatement.NetAccountingCurrencyAmount -= payrollPretAmortissements.Annuite ;
        #   // encaissée
        #   payrollPretAmortissements.isPayed = NoYes :: Yes ;
        #   //Attribution des montants du prêt
        #   payrollPret.MontantAmorti += payrollPretAmortissements.CapitalAmorti ;
        #   payrollPret.MontantRestant -= payrollPretAmortissements.CapitalAmorti ;
        #   //mise à jours
        #   ttsBegin;
        #   payrollPretAmortissements.update();
        #   payStatement.update();
        #   ttsCommit;
        #   //Si toutes les echeances sont encaissés alors le pret est soldé
        #   if(this.isSolde(payrollPret))
        #   {
        #   payrollPret.Status = PayrollPretStatus::Solde ;
        #   }
        #   ttsBegin;
        #   payrollPret.update();
        #   ttsCommit;
        #       }
        #
        #   }
        #
        #}
      ENDSOURCE
      SOURCE #calcBenefitsAndTaxes
        #/// <summary>
        #/// Drives the process of generating tax and benefit lines for the pay statement.
        #/// </summary>
        #/// <param name="_createdTaxableEarningsTotal">
        #/// The amount of earnings that are not exempt from taxes and are not fringe benefit
        #/// recovery.
        #/// </param>
        #public void calcBenefitsAndTaxes(PayrollStatementAccountingCurrencyAmount _createdTaxableEarningsTotal)
        #{
        #    PayrollCalculatePayStatementBenefits    calculateBenefits;
        #
        #    // Initializes the state of the tax calculation class to process the specified payment
        #    calculateTaxes.initializeForPayment(payStatement);
        #
        #    // Total and pass all wage amounts to the tax engine across all locations
        #    calculateTaxes.setWages();
        #
        #    // Call all applicable tax engine methods for the tax codes set up for this worker
        #    calculateTaxes.setTaxes();
        #
        #    if (paymentType != PayrollPaymentType::Manual)
        #    {
        #        // Process benefits for the current pay statement
        #        calculateBenefits = new PayrollCalculatePayStatementBenefits();
        #        calculateBenefits.initializeForPayment(payStatement,
        #            companyEndOfPayPeriod,
        #            accDistrTemplPosRecId,
        #            accDistrTemplNegRecId,
        #            templatePosRecIdMap,
        #            templateNegRecIdMap);
        #        createdDeductionsTotal += calculateBenefits.calculateBenefits();
        #    }
        #
        #    calculateTaxes.setBenefitsWageImpact();
        #
        #    // Process Grossup, if applicable, and adjust earnings accordingly
        #    if (payStatement.PaymentType == PayrollPaymentType::GrossUp)
        #    {
        #        createdEarningsTotal += calculateTaxes.createGrossUp(_createdTaxableEarningsTotal);
        #    }
        #
        #    // Update the tax engine for unemployment taxes
        #    calculateTaxes.setUnemployment();
        #
        #    // Initiate the tax calculation process of the tax engine
        #    calculateTaxes.calculate();
        #
        #    // Process the results of the tax engine and create tax lines, distributions, and statutory records
        #    calculateTaxes.createLines(accDistrTemplPosRecId, accDistrTemplNegRecId, templatePosRecIdMap, templateNegRecIdMap);
        #
        #    createdTaxesTotal += calculateTaxes.getDeductedTaxTotal();
        #
        #    if (paymentType != PayrollPaymentType::Manual)
        #    {
        #        // Process garnishment benefits for the current pay statement
        #        createdDeductionsTotal += calculateBenefits.processGarnishment(PayrollCategory::Garnishment);
        #
        #        // Process tax levy benefits for the current pay statement
        #        createdDeductionsTotal += calculateBenefits.processGarnishment(PayrollCategory::TaxLevy);
        #    }
        #}
      ENDSOURCE
      SOURCE #calcGrossMinusTaxes
        #/// <summary>
        #/// Calculates the net disposable earnings for the pay statement.
        #/// </summary>
        #/// <returns>
        #/// The net disposable earnings for the payment.
        #/// </returns>
        #/// <remarks>
        #/// Net disposable is calculated as earnings minus taxes.
        #/// </remarks>
        #public Amount calcGrossMinusTaxes()
        #{
        #    Amount                                  payableEarnings,
        #                                            employeeTaxes;
        #    PayrollPayStatementEarningLine          earningLine;
        #    PayrollPayStatementTaxLine              taxLine;
        #
        #    // Sum up the earnings for this payment
        #    select sum(AccountingCurrencyAmount) from earningLine
        #        where earningLine.PayStatement == payStatement.RecId
        #        &&    earningLine.IsMarkedForRemoval == NoYes::No;
        #
        #    payableEarnings = earningLine.AccountingCurrencyAmount;
        #
        #    // Sum all employee taxes for the payment
        #    select sum(AccountingCurrencyAmount) from taxLine
        #        where taxLine.PayStatement  == payStatement.RecId
        #        &&    taxLine.IsEmployer == NoYes::No
        #        &&    taxLine.IsMarkedForRemoval == NoYes::No;
        #
        #    employeeTaxes = taxLine.AccountingCurrencyAmount;
        #
        #    return (payableEarnings - employeeTaxes);
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #/// <summary>
        #/// The <c>PayrollPayStatementGenerationTask</c> class initiates the payment process for the worker or group of workers specified by the calling payment process driver class.
        #/// </summary>
        #class PayrollPayStatementGenerationTask extends RunBaseBatch
        #{
        #    #PayrollConstants
        #    PayrollPayPeriod payrollPayPeriod;
        #    PayrollPret payrollPret;
        #    PayrollPretAmortissements payrollPretAmortissements;
        #    PayrollPayPeriodRecId   payPeriodRecId;
        #    PayrollPaymentType      paymentType;
        #    PayrollPaymDate         paymentDate;
        #    PayrollPayStatementBatchNumber batchNumber;
        #    HcmWorkerRecId          workerRecId;
        #    LegalEntityRecId        legalEntityRecId;
        #    PayrollStatementAccountingCurrencyAmount    createdEarningsTotal,
        #                                                createdDeductionsTotal,
        #                                                createdTaxesTotal,
        #                                                arrearTolerance;
        #    boolean                 inPreTaxArrearRecalc,
        #                            calledWithPaymentRecord,
        #                            newTaskCreated;
        #    utcdatetime             companyEndOfPayPeriod;
        #    container               batchTaskGroupList;
        #
        #    PayrollPayStatement     payStatement;
        #    HcmWorker               worker;
        #    PRLPayrollParameters    parameters;
        #    PayrollCalculatePayStatementTaxes       calculateTaxes;
        #    PayrollPayPeriod        payPeriod;
        #    Map                     templatePosRecIdMap;
        #    Map                     templateNegRecIdMap;
        #
        #    AccountingDistributionTemplate  accDistributionTemplate;
        #    TemplateName                    templateName;
        #    AccountingDistributionTemplateRecId accDistrTemplPosRecId;
        #    AccountingDistributionTemplateRecId accDistrTemplNegRecId;
        #
        #    NoYes                   disableAccounting;
        #    boolean                 isManualPayStatementGeneration;
        #    boolean                 isManualPayStatementRecalculation;
        #
        #    #DEFINE.CurrentVersion(1)
        #
        #    #LOCALMACRO.CurrentList
        #        payPeriodRecId,
        #        paymentDate,
        #        paymentType,
        #        batchNumber,
        #        batchTaskGroupList,
        #        disableAccounting
        #    #ENDMACRO
        #}
      ENDSOURCE
      SOURCE #createArrears
        #/// <summary>
        #/// Determines if the pay statement has enough earnings to cover all deductions, and if
        #/// not it takes away deductive benefits and creates arrears until there are sufficient
        #/// earnings for the pay statement.
        #/// </summary>
        #/// <param name="_amountInArrears">
        #/// The amount that the pay statement does not have enough earnings to have a
        #/// positive amount.
        #/// </param>
        #/// <returns>
        #/// True indicates that benefit lines were either modified, removed, or added.
        #/// </returns>
        #/// <remarks>
        #/// This method expects the amount in arrears to be a positive number even
        #/// though as far as the pay statement is concerned it is logically a negative number.
        #/// If taxable earnings are affected by arrearing one or more deductions, the
        #/// payment process is called again to adjust taxes accordingly.
        #/// </remarks>
        #private boolean createArrears(Amount _amountInArrears)
        #{
        #    PayrollPayStatementGenerationTask   task;
        #    PRLDeductionArrear                  deductionArrear;
        #    PayrollArrearProcessingTmp          arrearProcessingTmp;
        #    PayrollPayStatementBenefitLine      benefitLine,
        #                                        benefitLineCount;
        #    PayrollBenefitPlanDetail            benefitPlanDetail;
        #    PayrollBenefitTaxRule_US            benefitTaxRuleUS;
        #    HcmBenefit                          benefit;
        #    HcmBenefitPlan                      benefitPlan;
        #    HcmWorkerEnrolledBenefit            workerEnrolledBenefit;
        #    PayrollWorkerEnrolledBenefitDetail  workerEnrolledBenefitDetail;
        #    Amount                              currentDeductionAmount,
        #                                        deductionAmountApplied,
        #                                        apportionedAmount,
        #                                        apportionedAmountRunningTotal,
        #                                        apportionedTotalDifference;
        #    boolean                             preTaxImpact,
        #                                        benefitsTotalChanged,
        #                                        arrearToleranceMet;
        #    int                                 currentLine;
        #
        #    //
        #    // If the amount currently in arrears is already within the specified arrear tolerance,
        #    // we still need to take arrears until we are no longer in arrears, but at that point we won't
        #    // need to recalc due to taxable changes nor will we need to attempt to recover arrears.
        #    //
        #    if (_amountInArrears <= arrearTolerance)
        #    {
        #        arrearToleranceMet = true;
        #    }
        #
        #    // Build the list of benefits to process so that it can be processed in the correct sequence
        #    while select Benefit, sum(AccountingCurrencyAmount) from benefitLine
        #        group by benefitLine.Benefit
        #        where benefitLine.PayStatement == payStatement.RecId
        #        &&    benefitLine.IsEmployer == NoYes::No
        #        &&    benefitLine.IsMarkedForRemoval == NoYes::No
        #    {
        #        benefit = HcmBenefit::findByTimeState(benefitLine.Benefit, companyEndOfPayPeriod);
        #        benefitPlanDetail = PayrollBenefitPlanDetail::findByBenefitPlan(benefit.BenefitPlan);
        #
        #        // Get the worker enrolled benefit if it exists
        #        workerEnrolledBenefit = HcmWorkerEnrolledBenefit::findByWorkerBenefit(workerRecId, benefitLine.Benefit, companyEndOfPayPeriod);
        #        workerEnrolledBenefitDetail = PayrollWorkerEnrolledBenefitDetail::findByWorkerEnrolledBenefitLegalEntity(workerEnrolledBenefit.RecId, legalEntityRecId, payPeriod.PeriodEndDate);
        #
        #        if (workerEnrolledBenefitDetail.RecId)
        #        {
        #            // Pull the deduction sequence off of the worker enrolled benefit detail
        #            arrearProcessingTmp.DeductionPriorityNumber = workerEnrolledBenefitDetail.DeductionPriorityNumber;
        #        }
        #        else
        #        {
        #            // The benefit doesn't exist for the worker and was manually entered, so get the sequence from the benefit itself
        #            arrearProcessingTmp.DeductionPriorityNumber = benefitPlanDetail.DefaultDeductionPriorityNumber;
        #        }
        #        arrearProcessingTmp.ArrearLimitMethod = benefitPlanDetail.ArrearLimitMethod;
        #        arrearProcessingTmp.IsArrearGenerated = benefitPlanDetail.IsArrearGenerated;
        #
        #        // Retrieve the benefit plan ID to use as a secondary sort after the sequence number
        #        benefitPlan = HcmBenefitPlan::find(benefit.BenefitPlan);
        #        arrearProcessingTmp.BenefitPlanID  = benefitPlan.BenefitPlanID;
        #        arrearProcessingTmp.Benefit = benefit.RecId;
        #
        #        // Determine the number of benefit lines for this benefit in order to know how to apportion (if needed)
        #        select count(RecId) from benefitLineCount
        #            where benefitLineCount.PayStatement == payStatement.RecId
        #            &&    benefitLineCount.Benefit == benefitLine.Benefit
        #            &&    benefitLineCount.IsEmployer == NoYes::No
        #            &&    benefitLineCount.IsMarkedForRemoval == NoYes::No;
        #
        #        arrearProcessingTmp.LineCount = int642int(benefitLineCount.RecId);
        #
        #        arrearProcessingTmp.AccountingCurrencyAmount = benefitLine.AccountingCurrencyAmount;
        #        arrearProcessingTmp.insert();
        #    }
        #
        #    // Process the pay statement benefits in order of sequence and then benefit plan ID
        #    while select arrearProcessingTmp
        #        order by DeductionPriorityNumber desc, BenefitPlanID asc
        #    {
        #        currentDeductionAmount = arrearProcessingTmp.AccountingCurrencyAmount;
        #
        #        if (arrearProcessingTmp.ArrearLimitMethod == PayrollArrearLimitMethod::AllOrNothing)
        #        {
        #            // The adjustment will be for the entire deduction amount, so clear out all benefit lines for the given benefit
        #            update_recordset benefitLine
        #                setting IsMarkedForRemoval = NoYes::Yes,
        #                        IsPayStatementLineOverridden = NoYes::Yes,
        #                        Source = PayrollPayStatementLineSource::ArrearCalculation,
        #                        AccountingCurrencyAmount = 0.0
        #                where benefitLine.PayStatement == payStatement.RecId
        #                &&    benefitLine.Benefit == arrearProcessingTmp.Benefit
        #                &&    benefitLine.IsEmployer == NoYes::No;
        #
        #            deductionAmountApplied = currentDeductionAmount;
        #        }
        #        else // Partial: the adjustment will not exceed the remaining amount in arrears
        #        {
        #            // Take as much as the deduction as possible without dipping below zero, else just take what remains
        #            deductionAmountApplied = _amountInArrears - currentDeductionAmount;
        #            if (deductionAmountApplied < 0)
        #            {
        #                deductionAmountApplied = _amountInArrears;
        #            }
        #            else
        #            {
        #                // Don't arrear the deduction for more than its current amount
        #                deductionAmountApplied = currentDeductionAmount;
        #            }
        #
        #            currentLine = 0;
        #            apportionedAmountRunningTotal = 0;
        #
        #            // The deduction amount could have been spread across multiple lines so loop through all lines to update/remove
        #            while select forupdate benefitLine
        #                where benefitLine.PayStatement == payStatement.RecId
        #                &&    benefitLine.Benefit == arrearProcessingTmp.Benefit
        #                &&    benefitLine.IsMarkedForRemoval == NoYes::No
        #                &&    benefitLine.IsEmployer == NoYes::No
        #            {
        #                currentLine++;
        #
        #                // Calculate the rounded apportioned deduction amount
        #                apportionedAmount = decRound((benefitLine.AccountingCurrencyAmount / currentDeductionAmount) * deductionAmountApplied, 2);
        #                apportionedAmountRunningTotal += apportionedAmount;
        #
        #                // If this is the last line created, adjust due to rounding error, if necessary
        #                if (currentLine == arrearProcessingTmp.LineCount)
        #                {
        #                    // Determine if there is a difference due to rounding
        #                    apportionedTotalDifference = (deductionAmountApplied - apportionedAmountRunningTotal);
        #                    if (apportionedTotalDifference != 0)
        #                    {
        #                        // Adjust the last deduction line's amount to account for the rounding difference
        #                        apportionedAmount += apportionedTotalDifference;
        #                    }
        #                }
        #
        #                // Adjust the original amount with the new apportioned deduction arrear amount
        #                benefitLine.AccountingCurrencyAmount -= apportionedAmount;
        #
        #                // If the entire deduction has been used for the arrear, remove it
        #                if (benefitLine.AccountingCurrencyAmount == 0)
        #                {
        #                    benefitLine.IsMarkedForRemoval = NoYes::Yes;
        #                }
        #
        #                // Update the benefit line
        #                benefitLine.IsPayStatementLineOverridden = NoYes::Yes;
        #                benefitLine.Source = PayrollPayStatementLineSource::ArrearCalculation;
        #                benefitLine.update();
        #            }
        #        }
        #
        #        benefitsTotalChanged = true;
        #
        #        // Adjust the net amount of the pay statement accordingly
        #        createdDeductionsTotal -= deductionAmountApplied;
        #        this.updatePayStatementTotals();
        #
        #        // Reduce the amount that is in arrears
        #        _amountInArrears -= deductionAmountApplied;
        #
        #        // Arrears will only be created if Yes is specified
        #        if (arrearProcessingTmp.IsArrearGenerated == NoYes::Yes)
        #        {
        #            //
        #            // Create/update the arrear record for the current benefit for the current pay statement and the amount adjusted.
        #            // Since the arrears process is recursive if pretax benefits are involved, additional arrears for a benefit may
        #            // need to be added to what was taken in previous iterations of the pay statement generation process.
        #            //
        #            select forUpdate deductionArrear
        #                where deductionArrear.PayStatement == payStatement.RecId
        #                &&    deductionArrear.Benefit == arrearProcessingTmp.Benefit;
        #            deductionArrear.PayStatement                = payStatement.RecId;
        #            deductionArrear.Benefit                     = arrearProcessingTmp.Benefit;
        #            deductionArrear.AccountingCurrencyAmount    += deductionAmountApplied;
        #            deductionArrear.write();
        #        }
        #
        #        // Determine if the affected benefit line(s) was a pre-tax benefit
        #        select benefitPlan where benefitPlan.BenefitPlanID == arrearProcessingTmp.BenefitPlanID;
        #        benefitTaxRuleUS = PayrollBenefitTaxRule_US::findByBenefitPlan(benefitPlan.RecId);
        #        preTaxImpact = (preTaxImpact || (benefitTaxRuleUS.PreTaxBasis != PayrollPreTaxBasis::None));
        #
        #        // If the amount in arrears is negative then the pay statment's net pay is positive, so stop trying to take more arrears
        #        if (_amountInArrears <= 0)
        #        {
        #            break;
        #        }
        #
        #    } // while select arrearProcessingTmp
        #
        #    // Only recalc the payment and potentially recover additional arrears if we are not yet within the arrear tolerance
        #    if (!arrearToleranceMet)
        #    {
        #        //
        #        // If there is a potential that a pretax deduction has affected our taxable earnings, we must
        #        // rerun the process again to get updated taxes; this occurs recursively
        #        //
        #        if (preTaxImpact)
        #        {
        #            task = new PayrollPayStatementGenerationTask();
        #            task.initializeFromPayment(payStatement, true, accDistrTemplPosRecId, accDistrTemplNegRecId, templatePosRecIdMap, templateNegRecIdMap);
        #            task.run();
        #        }
        #        else
        #        {
        #            //
        #            // There are wages left over to attempt to recover, so do so with that positive amount, but
        #            // only attempt to recover during non-regular runtypes if parameters has specified to do so.
        #            //
        #            if (paymentType == PayrollPaymentType::Primary || parameters.RecoverArrearInAllRunTypes)
        #            {
        #                this.recoverArrears(abs(_amountInArrears));
        #            }
        #        }
        #    }
        #    return benefitsTotalChanged;
        #}
      ENDSOURCE
      SOURCE #createPayStatement
        #/// <summary>
        #/// Creates the pay statement and associated line and distribution records for the specified worker.
        #/// </summary>
        #/// <param name="_workerRecId">
        #/// The RecId of the record in <c>HcmWorker</c> table.
        #/// </param>
        #/// <param name="_positions">
        #/// A <c>List</c> of position RecId values that are applicable to the current worker.
        #/// </param>
        #/// <remarks>
        #/// This is the main process driver for the creation of an individual pay statement.
        #/// </remarks>
        #public void createPayStatement(HcmWorkerRecId  _workerRecId, List _positions)
        #{
        #    PayrollStatementAccountingCurrencyAmount createdTaxableEarningsTotal;
        #
        #    // Validations that are applicable to the currently-being-processed worker
        #    this.validateWorker();
        #
        #    // Update the existing payment header only if one was supplied (e.g. a recalc of a modified payment)
        #    if (calledWithPaymentRecord)
        #    {
        #        // In a recalc situation, some lines need to be cleared out to make way for new versions and totals updated
        #        this.prepareForRecalc();
        #    }
        #    else
        #    {
        #        // Create the new payment header (also marked as processed)
        #        payStatement = PayrollPayStatement::create(workerRecId, payPeriodRecId, paymentDate, paymentType, batchNumber, !disableAccounting);
        #
        #        // Create the earnings for the specified positions and return the total earnings created
        #        createdEarningsTotal = PayrollCalculatePayStatementEarnings::createPayStatementEarningLines(payStatement, _positions, !disableAccounting);
        #        createdTaxesTotal = 0;
        #        createdDeductionsTotal = 0;
        #    }
        #
        #    // Validate that the earnings will allow the pay statement generation to proceed; calculate taxable earnings at the same time.
        #    createdTaxableEarningsTotal = this.validateEarnings();
        #
        #    //
        #    // Manual Pay Statements are processed slightly differently than standard Pay Statements. Manual Pay Statements do not
        #    // have benefits calculated by this process, and only have PRLUSTaxTransactionHistory records created during
        #    // the recalculation process. No PayrollPayStatementTaxLine records are written. In addition, the accounting
        #    // can be disabled for manual pay statements.
        #    //
        #
        #    if (!disableAccounting)
        #    {
        #        // Create the accounting distribution template
        #        if (accDistrTemplPosRecId == 0)
        #        {
        #            accDistrTemplPosRecId = PayrollPayStatementLine::createAccountingDistributionTemplate();
        #            templatePosRecIdMap = PayrollPayStatementLine::createAccountingDistributionDetail(payStatement, accDistrTemplPosRecId, true);
        #        }
        #
        #        if (accDistrTemplNegRecId == 0)
        #        {
        #            accDistrTemplNegRecId = PayrollPayStatementLine::createAccountingDistributionTemplate();
        #            templateNegRecIdMap = PayrollPayStatementLine::createAccountingDistributionDetail(payStatement, accDistrTemplNegRecId, false);
        #        }
        #    }
        #
        #    // if we are in the initial generation state, then we do not do any tax calculations
        #    if (!isManualPayStatementGeneration)
        #    {
        #        // Don't even bother creating benefit or tax lines if the pay statement has 0 earnings due to fringe benefits, unless it is a Grossup run
        #        if (createdTaxableEarningsTotal > 0)
        #        {
        #            // Process taxes and benefits for the payment
        #            this.calcBenefitsAndTaxes(createdTaxableEarningsTotal);
        #
        #            // Verify that sufficient payable earnings (non-imputed) exist to cover all taxes
        #            this.validateFundsAvailableForTaxes();
        #        }
        #    }
        #    payStatement.selectForUpdate(true);
        #
        #    // Update the pay statement totals, both gross and net
        #    this.updatePayStatementTotals(true);
        #
        #    // arrears are not applicable to Manual Pay Statements
        #    if (payStatement.PaymentType != PayrollPaymentType::Manual)
        #    {
        #        // Invoke arrear processing logic to remove or add benefit lines based on the lack of or surplus of net pay
        #        if (this.handleArrears())
        #        {
        #            // If benefit lines were impacted, then recalc the net here since the potential recursion in arrears complicates getting this updated from within.
        #            payStatement.NetAccountingCurrencyAmount = payStatement.GrossAccountingCurrencyAmount - payStatement.getDeductionAmount();
        #        }
        #
        #        // Delete the distribution template
        #        this.deleteAccountingDistributionTemplate();
        #    }
        #    // Only perform the update is no child tasks were created
        #    if (!inPreTaxArrearRecalc)
        #    {
        #        // in initial generation state, we set pay statement status to RequiresRecalculation
        #        if (isManualPayStatementGeneration)
        #        {
        #            payStatement.PaymentStatus = PayrollPaymentStatus::RequiresRecalculation;
        #        }
        #        // in recalculatiopn generation state, we set pay statement status to PaymentIssued
        #        else if (isManualPayStatementRecalculation)
        #        {
        #            payStatement.PaymentStatus = PayrollPaymentStatus::PaymentIssued;
        #
        #            if (disableAccounting)
        #            {
        #                payStatement.PostedStatus = PayrollPayStatementPostedStatus::Posted;
        #            }
        #        }
        #        else
        #        {
        #            payStatement.PaymentStatus = PayrollPaymentStatus::Calculated;
        #        }
        #        payStatement.update();
        #    }
        #}
      ENDSOURCE
      SOURCE #deleteAccountingDistributionTemplate
        #/// <summary>
        #/// Deletes the <c>AccountingDistributionTemplate</c> records used in the payment generation process.
        #/// </summary>
        #private void deleteAccountingDistributionTemplate()
        #{
        #    // Delete the accounting distribution template for positive earning lines
        #    accDistributionTemplate = AccountingDistributionTemplate::find(accDistrTemplPosRecId, true);
        #
        #    if (accDistributionTemplate.RecId)
        #    {
        #        accDistributionTemplate.delete();
        #    }
        #
        #    // Delete the accounting distribution template for negative earning lines
        #    accDistributionTemplate = AccountingDistributionTemplate::find(accDistrTemplNegRecId, true);
        #
        #    if (accDistributionTemplate.RecId)
        #    {
        #        accDistributionTemplate.delete();
        #    }
        #
        #    // Clear the recId values
        #    accDistrTemplPosRecId = 0;
        #    accDistrTemplNegRecId = 0;
        #}
      ENDSOURCE
      SOURCE #handleArrears
        #/// <summary>
        #/// Determines if arrears need to be created or if arrear recovery
        #/// should be attempted.
        #/// </summary>
        #/// <returns>
        #/// True indicates that benefit lines were either modified, removed, or added.
        #/// </returns>
        #/// <remarks>
        #/// If benefit lines were impacted, the caller may need to adjust the net amount
        #/// for the pay statement.
        #/// </remarks>
        #public boolean handleArrears()
        #{
        #    boolean benefitsTotalChanged = false;
        #
        #    // Determine if the pay statement has a negative net pay
        #    if (payStatement.NetAccountingCurrencyAmount < 0)
        #    {
        #        // Create arrears to bring the net pay into the positive
        #        benefitsTotalChanged = this.createArrears(abs(payStatement.NetAccountingCurrencyAmount));
        #    }
        #    else
        #    {
        #        // Only attempt to recover during non-regular runtypes if parameters has specified to do so
        #        if (paymentType == PayrollPaymentType::Primary || parameters.RecoverArrearInAllRunTypes)
        #        {
        #            // Recover arrears from the net available balance of the pay statement
        #            benefitsTotalChanged = this.recoverArrears(payStatement.NetAccountingCurrencyAmount);
        #        }
        #    }
        #    return benefitsTotalChanged;
        #}
      ENDSOURCE
      SOURCE #initializeFromPayment
        #/// <summary>
        #/// Initializes the pay statement generation process to recalculate the existing
        #/// <c>PayrollPayStatement</c> record with which it is supplied.
        #/// </summary>
        #/// <param name="_payStatement">
        #/// The <c>PayrollPayStatement</c> to reprocess.
        #/// </param>
        #/// <param name="_preTaxArrear">
        #/// Indicates if the pay statement to be recalculated is being done so as part
        #/// of the arrear creation or recovery process.
        #/// </param>
        #/// <param name="_distributionTemplatePositiveRecId">
        #/// The distribution for positive lines with which to base the accounting distribution.
        #/// </param>
        #/// <param name="_distributionTemplateNegativeRecId">
        #/// The distribution for negative lines with which to base the accounting distribution.
        #/// </param>
        #/// <param name="_templatePositiveRecIdMap">
        #/// The project distribution information for positive lines to use for creating the project acccountnig distribution.
        #/// </param>
        #/// <param name="_templateNegativeRecIdMap">
        #/// The project distribution information for negative lines to use for creating the project acccountnig distribution.
        #/// </param>
        #public void initializeFromPayment(
        #PayrollPayStatement                 _payStatement,
        #boolean                             _preTaxArrear = false,
        #AccountingDistributionTemplateRecId _distributionTemplatePositiveRecId = 0,
        #AccountingDistributionTemplateRecId _distributionTemplateNegativeRecId = 0,
        #Map                                 _templatePositiveRecIdMap = null,
        #Map                                 _templateNegativeRecIdMap = null
        #)
        #{
        #    List        emptyPositionsList = new List(Types::Int64);
        #
        #    // Initialize the state of the process from the existing payment
        #    payStatement.data(_payStatement);
        #    paymentDate = _payStatement.PaymentDate;
        #    workerRecId = _payStatement.Worker;
        #    payPeriodRecId = _payStatement.PayPeriod;
        #    paymentType = _payStatement.PaymentType;
        #    accDistrTemplPosRecId = _distributionTemplatePositiveRecId;
        #    accDistrTemplNegRecId = _distributionTemplateNegativeRecId;
        #    templatePosRecIdMap = _templatePositiveRecIdMap;
        #    templateNegRecIdMap = _templateNegativeRecIdMap;
        #
        #    ttsbegin;
        #    // Delete the accounting distribution template (if any exist)
        #    this.deleteAccountingDistributionTemplate();
        #    ttscommit;
        #
        #    // Indicates that we are recalculating an existing payment
        #    calledWithPaymentRecord = true;
        #
        #    // Indicates that the current process is a recalc due to the arrear process creating arrears or
        #    // recovering arrears of at least one pre-tax benefit.
        #    inPreTaxArrearRecalc = _preTaxArrear;
        #
        #    //
        #    // Positions container not needed for a recalc since earnings already created
        #    // ...it's just the single worker payment to process.
        #    //
        #    batchTaskGroupList = conNull();
        #    batchTaskGroupList += [[workerRecId, emptyPositionsList.pack()]];
        #
        #    // determines if this is the generation process for a Manual PayStatement, keep at bottom of method as it relies on other state variables set above
        #    this.setIsManualPayStatementGeneration();
        #
        #    // determines if this is the recalculation process for a Manual PayStatement, keep at bottom of method as it relies on other state variables set above
        #    this.setIsManualPayStatementRecalculation();
        #
        #    // determines if accounting was disabled for this pay statement
        #    this.setDisableAccountingForRecalculation();
        #}
      ENDSOURCE
      SOURCE #isSolde
        #private boolean isSolde(payrollPret _pret)
        #{
        #   PayrollPretAmortissements amortissement;
        # boolean isSolde = true;
        # select isPayed from amortissement
        # where amortissement.PayrollPret == _pret.RecId;
        #    {
        #     if(! amortissement.isPayed)
        #        {
        #            isSolde = false;
        #        }
        #    }
        #
        # return isSolde;
        #}
      ENDSOURCE
      SOURCE #loadParameters
        #/// <summary>
        #/// Drives the process of generating tax and benefit lines for the pay statement.
        #/// </summary>
        #private void loadParameters()
        #{
        #    // Retrieve the LE-specific payroll parameters
        #    parameters = PRLPayrollParameters::find();
        #
        #    // Look to the parameters to determine the arrear tolerance
        #    if (parameters.ArrearThresholdOverride)
        #    {
        #        arrearTolerance = parameters.ArrearThresholdOverride;
        #    }
        #    else
        #    {
        #        arrearTolerance = #ARREARTHRESHOLDDEFAULT;
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #pack
        #container pack()
        #{
        #    return [#CurrentVersion, #CurrentList];
        #}
      ENDSOURCE
      SOURCE #parmBatchNumber
        #public PayrollPayStatementBatchNumber parmBatchNumber(PayrollPayStatementBatchNumber _batchNumber = batchNumber)
        #{
        #    batchNumber = _batchNumber;
        #
        #    return batchNumber;
        #}
        #
      ENDSOURCE
      SOURCE #parmBatchTaskGroupList
        #public container parmBatchTaskGroupList(container _batchTaskGroupList = batchTaskGroupList)
        #{
        #    batchTaskGroupList = _batchTaskGroupList;
        #
        #    return batchTaskGroupList;
        #}
        #
      ENDSOURCE
      SOURCE #parmDisableAccounting
        #public NoYes parmDisableAccounting(NoYes _disableAccounting = disableAccounting)
        #{
        #    disableAccounting = _disableAccounting;
        #
        #    return disableAccounting;
        #}
      ENDSOURCE
      SOURCE #parmPaymentDate
        #public PayrollPaymDate parmPaymentDate(PayrollPaymDate _paymentDate = paymentDate)
        #{
        #    paymentDate = _paymentDate;
        #
        #    return paymentDate;
        #}
        #
      ENDSOURCE
      SOURCE #parmPaymentType
        #public PayrollPaymentType parmPaymentType(PayrollPaymentType _paymentType = paymentType)
        #{
        #    paymentType = _paymentType;
        #
        #    return paymentType;
        #}
      ENDSOURCE
      SOURCE #parmPayPeriodRecId
        #public PayrollPayCycleRecId parmPayPeriodRecId(PayrollPayPeriodRecId _payPeriodRecId = payPeriodRecId)
        #{
        #    payPeriodRecId = _payPeriodRecId;
        #
        #    return payPeriodRecId;
        #}
        #
      ENDSOURCE
      SOURCE #prepareForRecalc
        #/// <summary>
        #/// Removes records that need to be recalculated by the payment process when
        #/// recalculating the current payment.
        #/// </summary>
        #private void prepareForRecalc()
        #{
        #    PayrollPayStatementTaxLine      taxLines;
        #    PayrollPayStatementEarningLine  earningLines;
        #    PayrollPayStatementBenefitLine  benefitLines;
        #    PRLDeductionArrear              arrear;
        #    PRLDeductionArrearRecovery      arrearRecovery;
        #    PrlUSTaxTransactionHistory      usTaxTransactionHistory;
        #
        #    if (paymentType == PayrollPaymentType::GrossUp)
        #    {
        #        // The gross up "recovery" earnings must be deleted prior to a recalc
        #        delete_from earningLines
        #            where earningLines.PayStatement == payStatement.RecId
        #            &&    earningLines.Source == PayrollPayStatementLineSource::GrossUpEarning;
        #    }
        #
        #    if (inPreTaxArrearRecalc)
        #    {
        #        //
        #        // Remove all benefit lines related to the payment, except for any records that
        #        // have been modified and are not arrear recovery
        #        //
        #        delete_from benefitLines
        #            where benefitLines.PayStatement == payStatement.RecId
        #            &&    benefitLines.IsPayStatementLineOverridden == NoYes::No
        #            &&    benefitLines.Source != PayrollPayStatementLineSource::ArrearRecover;
        #    }
        #    else
        #    {
        #        //
        #        // For a normal recalc, remove all benefit lines related to the payment, except for any
        #        // records that have been modified unless they were adjusted by the arrears process, in
        #        // which case remove those so that they can be recreated if still necessary.
        #        //
        #        delete_from benefitLines
        #            where benefitLines.PayStatement == payStatement.RecId
        #            &&    (benefitLines.IsPayStatementLineOverridden == NoYes::No
        #                    || benefitLines.Source == PayrollPayStatementLineSource::ArrearCalculation);
        #
        #        // Remove all arrears for the being-recalced payment since they will be regenerated based on the new information
        #        delete_from arrear
        #            where arrear.PayStatement == payStatement.RecId;
        #
        #        // Remove all arrear recovery records for the being-recalced payment since they will be regenerated based on the new information
        #        delete_from arrearRecovery
        #            where arrearRecovery.PayStatement == payStatement.RecId;
        #    }
        #
        #    // Remove all tax lines related to the payment, except for any records that have been modified
        #    delete_from taxLines
        #        where taxLines.PayStatement == payStatement.RecId
        #        &&    taxLines.IsPayStatementLineOverridden == NoYes::No;
        #
        #    // Always delete existing statutory tax data records for the pay statement and let them get rewritten
        #    delete_from usTaxTransactionHistory
        #        where usTaxTransactionHistory.PayStatement == payStatement.RecId;
        #
        #    //
        #    // Sum the earnings, taxes, and benefit lines to start off the recalculation process since any
        #    // already-existing and modified lines will not be written by the benefit and tax creation processes
        #    // and won't be included in their totals (and the earnings process is not run at all).
        #    //
        #    select sum(AccountingCurrencyAmount) from earningLines
        #        where earningLines.PayStatement == payStatement.RecId
        #        &&    earningLines.IsMarkedForRemoval == NoYes::No;
        #
        #    select sum(AccountingCurrencyAmount) from taxLines
        #        where taxLines.PayStatement == payStatement.RecId
        #        &&    taxLines.IsEmployer == NoYes::No
        #        &&    taxLines.IsMarkedForRemoval == NoYes::No;
        #
        #    select sum(AccountingCurrencyAmount) from benefitLines
        #        where benefitLines.PayStatement == payStatement.RecId
        #        &&    benefitLines.IsEmployer == NoYes::No
        #        &&    benefitLines.IsMarkedForRemoval == NoYes::No;
        #
        #    createdEarningsTotal = earningLines.AccountingCurrencyAmount;
        #    createdTaxesTotal = taxLines.AccountingCurrencyAmount;
        #    createdDeductionsTotal = benefitLines.AccountingCurrencyAmount;
        #}
      ENDSOURCE
      SOURCE #recoverArrears
        #/// <summary>
        #/// Determines if there are arrears that can be recovered by the available
        #/// earnings on the current pay statement, and if so they are recovered and
        #/// benefit lines are created on the pay statement for the recovered amounts.
        #/// </summary>
        #/// <param name="_earningsRemaining">
        #/// Specifies how much earnings the pay statement has available to apply to
        #/// recovering existing arrears.
        #/// </param>
        #/// <returns>
        #/// True indicates that benefit lines were either modified, removed, or added.
        #/// </returns>
        #/// <remarks>
        #/// If taxable earnings are affected by recovering one or more deductions, the
        #/// payment process is called again to adjust taxes accordingly.
        #/// </remarks>
        #private boolean recoverArrears(Amount _earningsRemaining)
        #{
        #    PayrollPayStatementGenerationTask   task;
        #    PayrollPayStatementBenefitLine      benefitLine;
        #    PayrollArrearRecoveryProcessingTmp  recoveryProcessingTmp;
        #    PRLDeductionArrearRecovery          deductionArrearRecovery;
        #    PRLArrearsWithRecoveryBalance       arrears;
        #    HcmBenefit                          benefit;
        #    HcmBenefitPlan                      benefitPlan;
        #    PayrollBenefitPlanDetail            benefitPlanDetail;
        #    PayrollBenefitTaxRule_US            benefitTaxRuleUS;
        #    HcmWorkerEnrolledBenefit            workerEnrolledBenefit;
        #    PayrollWorkerEnrolledBenefitDetail  workerEnrolledBenefitDetail;
        #    Amount                              currentDeductionAmount,
        #                                        deductionAmountApplied;
        #    boolean                             preTaxArrearRecovered,
        #                                        benefitsTotalChanged;
        #
        #    // If we are within the arrear tolerance then no more recoveries need to be attempted
        #    if (_earningsRemaining <= arrearTolerance)
        #    {
        #        return false;
        #    }
        #
        #    // Build tmp table of unrecovered arrears to potentially recover with proper sequencing assigned
        #    while select arrears
        #        where arrears.Worker == payStatement.Worker
        #        &&    arrears.PayStatement != payStatement.RecId
        #        &&    arrears.FullyRecovered == NoYes::No
        #    {
        #        benefit = HcmBenefit::findByTimeState(arrears.Benefit, companyEndOfPayPeriod);
        #        benefitPlanDetail = PayrollBenefitPlanDetail::findByBenefitPlan(benefit.BenefitPlan);
        #
        #        // Get the worker enrolled benefit if it exists
        #        workerEnrolledBenefit = HcmWorkerEnrolledBenefit::findByWorkerBenefit(workerRecId, arrears.Benefit, companyEndOfPayPeriod);
        #        workerEnrolledBenefitDetail = PayrollWorkerEnrolledBenefitDetail::findByWorkerEnrolledBenefitLegalEntity(workerEnrolledBenefit.RecId, legalEntityRecId, payPeriod.PeriodEndDate);
        #
        #        if (workerEnrolledBenefitDetail.RecId)
        #        {
        #            // Pull the deduction sequence off of the worker enrolled benefit
        #            recoveryProcessingTmp.DeductionPriorityNumber = workerEnrolledBenefitDetail.DeductionPriorityNumber;
        #        }
        #        else
        #        {
        #            // The benefit doesn't exist for the worker and was manually entered, so get the sequence from the benefit itself
        #            recoveryProcessingTmp.DeductionPriorityNumber = benefitPlanDetail.DefaultDeductionPriorityNumber;
        #        }
        #        recoveryProcessingTmp.ArrearLimitMethod = benefitPlanDetail.ArrearLimitMethod;
        #
        #        // Retrieve the benefit plan ID to use as a secondary sort after the sequence number
        #        benefitPlan = HcmBenefitPlan::find(benefit.BenefitPlan);
        #        recoveryProcessingTmp.BenefitPlanID  = benefitPlan.BenefitPlanID;
        #
        #        recoveryProcessingTmp.Benefit = arrears.Benefit;
        #        recoveryProcessingTmp.Position = workerEnrolledBenefitDetail.Position;
        #        recoveryProcessingTmp.GeneratingPayStatementRecId = arrears.PayStatement;
        #        recoveryProcessingTmp.DeductionArrear = arrears.ArrearRecId;
        #        recoveryProcessingTmp.AmountRemaining = arrears.ArrearAmount + arrears.RecoveryAmount;
        #        recoveryProcessingTmp.insert();
        #    }
        #
        #    //
        #    // Recover arrears in the proper sequence until the net pay is positive; oldest pay statements'
        #    // to newest by recid (order actually created, not by payment date), then within each pay statement
        #    // recover arrears in reservse order of creation.
        #    //
        #    while select recoveryProcessingTmp
        #        order by GeneratingPayStatementRecId asc, DeductionArrear desc
        #    {
        #        // Determine the amount of this arrear that can be recovered
        #        currentDeductionAmount = recoveryProcessingTmp.AmountRemaining;
        #
        #        // The adjustment will be for the entire deduction amount if enough earnings available
        #        if (recoveryProcessingTmp.ArrearLimitMethod == PayrollArrearLimitMethod::AllOrNothing)
        #        {
        #            //
        #            // If the current deduction exceeds the available earnings then none of it can be recovered
        #            // and so skip to the next arrear.
        #            //
        #            if (currentDeductionAmount > _earningsRemaining)
        #            {
        #                continue;
        #            }
        #            deductionAmountApplied = currentDeductionAmount;
        #        }
        #        else // Partial: the adjustment will not exceed the remaining amount in arrears
        #        {
        #            // Take as much as the deduction as possible without dipping below zero, else just take what remains to be recovered
        #            deductionAmountApplied = _earningsRemaining - currentDeductionAmount;
        #            if (deductionAmountApplied < 0)
        #            {
        #                deductionAmountApplied = _earningsRemaining;
        #            }
        #            else
        #            {
        #              // If funds available do not try to over-recover more than is necessary
        #              deductionAmountApplied = currentDeductionAmount;
        #            }
        #        }
        #
        #        // Adjust the net amount of the pay statement accordingly
        #        createdDeductionsTotal += deductionAmountApplied;
        #        this.updatePayStatementTotals();
        #
        #        // Reduce the amount that is in arrears
        #        _earningsRemaining -= deductionAmountApplied;
        #
        #        //
        #        // Create the recovery record for the arrear and created benefit line, saving the amount as a negative.
        #        // This needs to be done before the recovery benefitline is created so that limit amount remaining of
        #        // the benefit is increased by the amount of the benefitline that is about to be created which will
        #        // in turn reduce it back down again. Doing so in the reverse order could cause the limit to be exceeded
        #        // and a warning displayed in the infolog.
        #        //
        #        deductionArrearRecovery = PRLDeductionArrearRecovery::create(recoveryProcessingTmp.DeductionArrear, PRLArrearOffsetType::Recovery, -deductionAmountApplied, payStatement.RecId);
        #
        #        // Recover the deduction arrear amount, creating a PayrollPayStatementBenefitLine
        #        benefitLine = PayrollPayStatementBenefitLine::create(payStatement,
        #            payPeriod.PeriodEndDate,
        #            HcmBenefit::find(recoveryProcessingTmp.Benefit),
        #            accDistrTemplPosRecId,
        #            deductionAmountApplied,
        #            PayrollType::Deduction,
        #            recoveryProcessingTmp.Position,
        #            PayrollPayStatementLineSource::ArrearRecover);
        #
        #        benefitsTotalChanged = true;
        #
        #        select benefitPlan where benefitPlan.BenefitPlanID == recoveryProcessingTmp.BenefitPlanID;
        #        benefitTaxRuleUS = PayrollBenefitTaxRule_US::findByBenefitPlan(benefitPlan.RecId);
        #        preTaxArrearRecovered = (preTaxArrearRecovered || (benefitTaxRuleUS.PreTaxBasis != PayrollPreTaxBasis::None));
        #
        #        //
        #        // Evaluate if the remaining amount in arrears is now within the defined Arrear Tolerance; if so, no more arrears
        #        // need be processed so break out of loop.
        #        //
        #        if (_earningsRemaining == 0)
        #        {
        #            break;
        #        }
        #
        #    } // while select recoveryProcessingTmp
        #
        #    //
        #    // If there is a potential that a pretax deduction has affected our taxable earnings, we must
        #    // rerun the process again to get updated taxes; this occurs recursively.
        #    //
        #    if (preTaxArrearRecovered)
        #    {
        #        task = new PayrollPayStatementGenerationTask();
        #        task.initializeFromPayment(payStatement, true, accDistrTemplPosRecId, accDistrTemplNegRecId, templatePosRecIdMap, templateNegRecIdMap);
        #        task.run();
        #    }
        #    return benefitsTotalChanged;
        #}
      ENDSOURCE
      SOURCE #run
        #public void run()
        #{
        #    #OCCRetryCount
        #    InteropPermission                       permission = new InteropPermission(InteropKind::ClrInterop);
        #    container                               pairedContainer;
        #    List                                    workerPositions;
        #    int                                     i = 1;
        #    System.Exception                        netException;
        #
        #    // Initialize the tax engine instance to be used for the payment calculation process
        #    try
        #    {
        #        calculateTaxes = new PayrollCalculatePayStatementTaxes();
        #        calculateTaxes.initializeTaxEngine();
        #    }
        #    catch (Exception::CLRError)
        #    {
        #        // This exception will always display in the infolog even when caught, so remove it from the infolog.
        #        infolog.clear(Global::infologLine()-1);
        #        error("@GLS93022");
        #        return;
        #    }
        #
        #    // Retrieve into state the parameters needed for the task execution
        #    this.loadParameters();
        #
        #    legalEntityRecId = CompanyInfo::current();
        #
        #    // Create the utcdatetime used to retrieve from utcdatetime-based date effective tables
        #    payPeriod = PayrollPayPeriod::find(payPeriodRecId);
        #    companyEndOfPayPeriod = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(payPeriod.PeriodEndDate, timeMax()), CompanyInfo::getDefaultTimeZone(CompanyInfo::find()));
        #
        #    //
        #    // The calling process has supplied a container comprised of 1..n pairings of workerRecId values paired
        #    // with a container of their corresponding applicable Positions, so loop through this list of workers to process
        #    //
        #    for (i=1; i<= conLen(batchTaskGroupList); i++)
        #    {
        #        pairedContainer = conPeek(batchTaskGroupList, i);
        #
        #        //
        #        // The workerRecId is always the first element of the current container and the
        #        // container of positions is always the second element of the current container.
        #        //
        #        workerRecId = conPeek(pairedContainer, 1);
        #        workerPositions = List::create(conPeek(pairedContainer, 2));
        #        // Validations that are applicable to the currently-being-processed worker
        #        try
        #        {
        #            //
        #            // Create the pay statement header, earning lines, benefit lines, and taxes lines, as well
        #            // as associated distributions.
        #            //
        #            ttsbegin;
        #            this.createPayStatement(workerRecId, workerPositions);
        #            ttscommit;
        #        }
        #        catch (Exception::Error)
        #        {
        #            //
        #            // Assumes that any error message was already raised at the point that threw the exception,
        #            // so continue to the next worker.
        #            //
        #            continue;
        #        }
        #
        #        catch (Exception::CLRError)
        #        {
        #            //
        #            // If the tax engine threw an exception, report the worker that it occurred on,
        #            // display the exception message and call stack, and continue to the next worker.
        #            //
        #
        #            if (worker.RecId != workerRecId)
        #            {
        #                worker = HcmWorker::find(workerRecId);
        #            }
        #            setPrefix(strFmt("@GLS93084", worker.PersonnelNumber));
        #            permission.assert();
        #            //BP Deviation Documented
        #            netException = CLRInterop::getLastException();
        #            if (!CLRInterop::isNull(netException))
        #            {
        #                error(netException.ToString());
        #            }
        #            else
        #            {
        #                // If no .net exception is available then at least report something
        #                error("@SYS83461");
        #            }
        #            CodeAccessPermission::revertAssert();
        #            continue;
        #        }
        #        catch (Exception::Deadlock)
        #        {
        #            if (xSession::currentRetryCount() >= #RetryNum)
        #            {
        #                error(strFmt("@GLS93273", HcmWorker::find(workerRecId).PersonnelNumber));
        #                continue;
        #            }
        #            else
        #            {
        #                retry;
        #            }
        #        }
        #        catch (Exception::UpdateConflict)
        #        {
        #            if (appl.ttsLevel() == 0)
        #            {
        #                if (xSession::currentRetryCount() >= #RetryNum)
        #                {
        #                    error(strFmt("@GLS93274", HcmWorker::find(workerRecId).PersonnelNumber));
        #                    continue;
        #                }
        #                else
        #                {
        #                    retry;
        #                }
        #            }
        #            else
        #            {
        #                error(strFmt("@GLS93274", HcmWorker::find(workerRecId).PersonnelNumber));
        #                continue;
        #            }
        #        }
        #    }
        #    calculateTaxes.disposeTaxEngine();
        #}
      ENDSOURCE
      SOURCE #setDisableAccountingForRecalculation
        #/// <summary>
        #/// Deterimes whether the pay statement has accounting disabled.
        #/// </summary>
        #/// <remarks>
        #/// This method stores the result of the logic in the class disableAccounting variable.
        #/// </remarks>
        #protected void setDisableAccountingForRecalculation()
        #{
        #    if (isManualPayStatementRecalculation
        #        && payStatement.SourceDocumentHeader == 0)
        #    {
        #        disableAccounting = true;
        #    }
        #    else
        #    {
        #        disableAccounting = false;
        #    }
        #}
      ENDSOURCE
      SOURCE #setIsManualPayStatementGeneration
        #/// <summary>
        #/// Deterimes whether the pay statement has been just created from the generation process and is for manual <c>PayrollEarningStatementLine</c> records.
        #/// </summary>
        #/// <remarks>
        #/// This method will set the isManualPayStatementGeneration class variable to true if we are in a Pay Statement Generation for a manual Pay Statement.
        #/// </remarks>
        #protected void setIsManualPayStatementGeneration()
        #{
        #    if ((!calledWithPaymentRecord)
        #        && (payStatement.PaymentType == PayrollPaymentType::Manual))
        #    {
        #        isManualPayStatementGeneration = true;
        #    }
        #    else
        #    {
        #        isManualPayStatementGeneration = false;
        #    }
        #}
      ENDSOURCE
      SOURCE #setIsManualPayStatementRecalculation
        #/// <summary>
        #/// Deterimes whether the pay statement has been just created from the generation process and is for manual <c>PayrollEarningStatementLine</c> records.
        #/// </summary>
        #/// <remarks>
        #/// This method will set the isManualPayStatementRecalculation class variable to true if we are in a Pay Statement Recalculation for a manual Pay Statement.
        #/// </remarks>
        #protected void setIsManualPayStatementRecalculation()
        #{
        #    if (calledWithPaymentRecord
        #        && (payStatement.PaymentType == PayrollPaymentType::Manual))
        #    {
        #        isManualPayStatementRecalculation = true;
        #    }
        #    else
        #    {
        #        isManualPayStatementRecalculation = false;
        #    }
        #}
      ENDSOURCE
      SOURCE #unpack
        #public boolean unpack(container packedClass)
        #{
        #    Version     version = RunBase::getVersion(packedClass);
        #
        #    switch (version)
        #    {
        #        case #CurrentVersion:
        #            [version, #CurrentList] = packedClass;
        #
        #        break;
        #
        #        default:
        #            return false;
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #updatePayStatementTotals
        #/// <summary>
        #/// Updates the net and gross totals on the pay statement.
        #/// </summary>
        #/// <param name="_updateGross">
        #/// Indicates if the gross amount for the pay statement should get updated
        #/// as well as the net amount; optional.
        #/// </param>
        #/// <remarks>
        #/// The gross amount is the sum of all earnings whereas the net amount is
        #/// earnings minus deductive benefits and taxes.
        #/// </remarks>
        #public void updatePayStatementTotals(boolean _updateGross = false)
        #{
        #    PayrollStatementAccountingCurrencyAmount netAmount;
        #
        #    if (_updateGross)
        #    {
        #        payStatement.GrossAccountingCurrencyAmount = createdEarningsTotal;
        #    }
        #
        #    netAmount = createdEarningsTotal - createdDeductionsTotal - createdTaxesTotal;
        #    payStatement.NetAccountingCurrencyAmount = netAmount;
        #    //Appliquer l'echeance sur prêt ( s'il existe )
        #    this.appliquerEcheancePret(payStatement);
        #
        #}
      ENDSOURCE
      SOURCE #validateEarnings
        #/// <summary>
        #/// Validates the earnings for the pay statement.
        #/// </summary>
        #/// <returns>
        #/// The total taxable earnings for the pay statement.
        #/// </returns>
        #/// <exception cref="Exception::Error">
        #/// The sum of earnings for the worker is less than zero.
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #/// No earnings records exist for the worker.
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #/// The sum of earnings for the worker is less than zero due to
        #/// imputed earnings recovery.
        #/// </exception>
        #public PayrollStatementAccountingCurrencyAmount validateEarnings()
        #{
        #    PayrollPayStatementEarningLine      earningLine;
        #    HcmPositionWorkerAssignment         positionWorkerAssignment;
        #    PayrollEarningCode                  earningCode;
        #    PayrollStatementAccountingCurrencyAmount    totalEarnings,
        #                                                totalTaxableEarnings;
        #    int                                 totalEarningsRecordCount;
        #
        #    // Sum pay statement earning lines to get all earnings for the pay statement
        #    select sum(AccountingCurrencyAmount), count(RecId) from earningLine
        #        where earningLine.PayStatement == payStatement.RecId
        #        &&    earningLine.IsMarkedForRemoval == NoYes::No;
        #
        #    totalEarnings = earningLine.AccountingCurrencyAmount;
        #    totalEarningsRecordCount = int642int(earningLine.RecId);
        #
        #
        #    if (totalEarnings < 0)
        #    {
        #        // The sum of earnings for worker %1 is less than zero. No payment has been created for this employee.
        #        throw error(strFmt("@GLS93089", HcmWorker::find(workerRecId).PersonnelNumber));
        #    }
        #
        #    if (totalEarnings == 0 && totalEarningsRecordCount == 0)
        #    {
        #        select validTimeState(companyEndOfPayPeriod) RecId from positionWorkerAssignment where positionWorkerAssignment.Worker == workerRecId;
        #
        #        // Only throw error if the worker has an active position assignment as of the end of the pay period
        #        if (positionWorkerAssignment.RecId)
        #        {
        #            // No earnings records exist for worker %1. No payment has been created for this worker.
        #            throw error(strFmt("@GLS93154", HcmWorker::find(workerRecId).PersonnelNumber));
        #        }
        #        else
        #        {
        #            // We still want to rollback the transaction and continue to the next pay statement to create
        #            throw Exception::Error;
        #        }
        #    }
        #
        #    // If earnings are zero and there are imputed earnings
        #    select sum(AccountingCurrencyAmount) from earningLine
        #        where earningLine.PayStatement == payStatement.RecId
        #        &&    earningLine.Source == PayrollPayStatementLineSource::FringeBenefitRecover
        #        &&    earningLine.IsMarkedForRemoval == NoYes::No;
        #
        #    if (totalEarnings == 0 && earningLine.AccountingCurrencyAmount < 0 && paymentType != PayrollPaymentType::GrossUp)
        #    {
        #        // The sum of earnings for worker %1 is less than zero due to fringe benefit recovery. No pay statement has been created for this worker.
        #        throw error(strFmt("@GLS93094", HcmWorker::find(workerRecId).PersonnelNumber));
        #    }
        #
        #    //
        #    // Due to the tax engine not being able to handle negative earnings, we must validate that there
        #    // will be no negative earning amounts passed into it.  Also must exclude fringe benefit recovery records.
        #    //
        #    while select sum(AccountingCurrencyAmount) from earningLine
        #        where earningLine.PayStatement == payStatement.RecId
        #        &&    earningLine.IsMarkedForRemoval == NoYes::No
        #        &&    earningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover
        #        join RecId, TaxMethod from earningCode
        #            group by earningLine.WorkerTaxRegion, earningCode.TaxMethod
        #            where earningCode.RecId == earningLine.EarningCode
        #            && earningCode.TaxMethod != PayrollTaxMethod::Exempt
        #    {
        #        if (earningLine.AccountingCurrencyAmount < 0)
        #        {
        #            // The sum of %1 earnings for at least one tax region for worker %2 is less than zero. No pay statement has been created for this worker.
        #            throw error(strFmt("@GLS93155", earningCode.TaxMethod, HcmWorker::find(workerRecId).PersonnelNumber));
        #        }
        #        totalTaxableEarnings += earningLine.AccountingCurrencyAmount;
        #    }
        #    return totalTaxableEarnings;
        #}
      ENDSOURCE
      SOURCE #validateFundsAvailableForTaxes
        #/// <summary>
        #/// Validates that sufficient payable earnings (non-imputed) exist to
        #/// cover all taxes for the payment.
        #/// </summary>
        #/// <returns>
        #/// True indicates that the payment passed validation.
        #/// </returns>
        #/// <exception cref="Exception::Error">
        #/// Taxes for the payment are greater than earnings.
        #/// </exception>
        #boolean validateFundsAvailableForTaxes()
        #{
        #    boolean                                 passedValidation = false;
        #
        #    // Verify that sufficient payable earnings (non-imputed) exist to cover all taxes
        #    if (this.calcGrossMinusTaxes() < 0)
        #    {
        #        throw error(strFmt("@GLS93090", worker.PersonnelNumber));
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #validateWorker
        #/// <summary>
        #/// Validates that the payment for the current worker will
        #/// be able to proceed without errors.
        #/// </summary>
        #/// <returns>
        #/// True if the worker passed validation.
        #/// </returns>
        #/// <exception cref="Exception::Error">
        #/// The worker is missing a resident tax region.
        #/// </exception>
        #/// <exception cref="Exception::Error">
        #/// The worker has already received a primary pay statement for the
        #/// current pay period.
        #/// </exception>
        #boolean validateWorker()
        #{
        #    PayrollPayStatement                 payStatementExistenceCheck;
        #
        #    // Validate that a resident tax region exists for the worker
        #    if (PayrollWorkerResidentTaxRegion::findByWorker(workerRecId, paymentDate).RecId == 0)
        #    {
        #        throw error(strFmt("@GLS90730", HcmWorker::find(workerRecId).PersonnelNumber));
        #    }
        #
        #    //
        #    // Validate that there is no primary payment existing for the worker for this pay period
        #    // that has not been voided (validation not needed during a recalc).
        #    //
        #    if (paymentType == PayrollPaymentType::Primary && !calledWithPaymentRecord)
        #    {
        #        select firstonly RecId from payStatementExistenceCheck
        #            where payStatementExistenceCheck.Worker == workerRecId
        #            &&    payStatementExistenceCheck.PayPeriod == payPeriodRecId
        #            &&    payStatementExistenceCheck.PaymentType == PayrollPaymentType::Primary
        #            &&    payStatementExistenceCheck.IsReversed == NoYes::No;
        #
        #        if (payStatementExistenceCheck.RecId)
        #        {
        #            throw error(strFmt("@GLS94530", HcmWorker::find(workerRecId).PersonnelNumber));
        #        }
        #    }
        #
        #    return true;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class : NumberSeqModulePayroll déchargé
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #NumberSeqModulePayroll
    PROPERTIES
      Name                #NumberSeqModulePayroll
      Extends             #NumberSeqApplicationModule
      RunOn               #Server
      Origin              #{B2BFDB80-602C-452C-A8E8-15138A6C31AE}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #/// <summary>
        #/// The <c>NumberSeqModulePayroll</c> class is used to configure number sequences in the Payroll module.
        #/// </summary>
        #/// <remarks>
        #/// The details of configuring number sequence is in method loadModule().
        #/// </remarks>
        #
        #public class NumberSeqModulePayroll extends NumberSeqApplicationModule
        #{
        #    #Define.MAXSEQRANGE(99999999)
        #}
      ENDSOURCE
      SOURCE #loadModule
        #/// <summary>
        #///    Configures all of the data types that are used by the module.
        #/// </summary>
        #
        #protected void loadModule()
        #{
        #    NumberSeqDatatype datatype = NumberSeqDatatype::construct();
        #
        #    this.setUpEarningStatementsIds(datatype);
        #
        #    this.setUpPayStatementIds(datatype);
        #
        #    this.setUpPayrollPretId(datatype);
        #}
      ENDSOURCE
      SOURCE #numberSeqModule
        #/// <summary>
        #///    Retrieves the ID of the Payroll module for this class.
        #/// </summary>
        #/// <returns>
        #///    The module specific ID.
        #/// </returns>
        #
        #public NumberSeqModule numberSeqModule()
        #{
        #    return NumberSeqModule::Payroll;
        #}
        #
      ENDSOURCE
      SOURCE #setUpEarningStatementsIds
        #/// <summary>
        #///    Configures the data types of Earning statement ids
        #/// </summary>
        #/// <param name="datatype">
        #///    The value of the number sequence datatype
        #/// </param>
        #public void setUpEarningStatementsIds(NumberSeqDatatype datatype)
        #{
        #    /* Setup earning statement ids */
        #    datatype.parmDatatypeId(extendedTypeNum(PayrollEarningStatementId));
        #    datatype.parmReferenceHelp(literalStr("@GLS93410"));
        #    datatype.parmReferenceLabel(literalStr("@GLS92976"));
        #    datatype.parmWizardIsContinuous(true);
        #    datatype.parmWizardIsManual(NoYes::No);
        #    datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        #    datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        #    datatype.parmWizardHighest(#MAXSEQRANGE);
        #    datatype.parmSortField(1);
        #
        #    datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        #    this.create(datatype);
        #}
      ENDSOURCE
      SOURCE #setUpPayrollPretId
        #private void setUpPayrollPretId(NumberSeqDatatype datatype)
        #{
        #    datatype.parmDatatypeId(extendedtypenum(PayrollPretId));
        #
        #    datatype.parmReferenceHelp("identifiant prêt");
        #
        #    datatype.parmReferenceLabel("identifiant prêt");
        #
        #    datatype.parmWizardIsContinuous(true);
        #
        #    datatype.parmWizardIsManual(NoYes::No);
        #
        #    datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        #
        #    datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        #
        #    datatype.parmWizardHighest(999999999);
        #
        #    datatype.parmSortField(12);
        #
        #
        #
        #    this.create(datatype);
        #}
      ENDSOURCE
      SOURCE #setUpPayStatementIds
        #/// <summary>
        #///    Configures the data types of Pay statement ids
        #/// </summary>
        #/// <param name="datatype">
        #///    The value of the number sequence datatype
        #/// </param>
        #public void setUpPayStatementIds(NumberSeqDatatype datatype)
        #{
        #    /* Setup pay statement ids */
        #    datatype.parmDatatypeId(extendedTypeNum(PayrollPayStatementId));
        #    datatype.parmReferenceHelp(literalStr("@GLS93569"));
        #    datatype.parmReferenceLabel(literalStr("@GLS93570"));
        #    datatype.parmWizardIsContinuous(true);
        #    datatype.parmWizardIsManual(NoYes::No);
        #    datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        #    datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        #    datatype.parmWizardHighest(#MAXSEQRANGE);
        #    datatype.parmSortField(2);
        #
        #    datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        #    this.create(datatype);
        #
        #    datatype.parmDatatypeId(extendedTypeNum(PayrollPayStatementVoucher));
        #    datatype.parmReferenceHelp(literalStr("@GLS93837"));
        #    datatype.parmReferenceLabel(literalStr("@GLS93836"));
        #    datatype.parmWizardIsContinuous(true);
        #    datatype.parmWizardIsManual(NoYes::No);
        #    datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        #    datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        #    datatype.parmWizardHighest(#MAXSEQRANGE);
        #    datatype.parmSortField(3);
        #
        #    datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        #    this.create(datatype);
        #
        #    datatype.parmDatatypeId(extendedTypeNum(PayrollVendorInvoiceNum));
        #    datatype.parmReferenceHelp(literalStr("@GLS94311"));
        #    datatype.parmReferenceLabel(literalStr("@GLS94310"));
        #    datatype.parmWizardIsContinuous(true);
        #    datatype.parmWizardIsManual(NoYes::No);
        #    datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        #    datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        #    datatype.parmWizardHighest(#MAXSEQRANGE);
        #    datatype.parmSortField(4);
        #
        #    datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        #    this.create(datatype);
        #
        #    datatype.parmDatatypeId(extendedTypeNum(PayrollPayStatementBatchNumber));
        #    datatype.parmReferenceHelp(literalStr("@GLS94449"));
        #    datatype.parmReferenceLabel(literalStr("@SYS53635"));
        #    datatype.parmWizardIsContinuous(true);
        #    datatype.parmWizardIsManual(NoYes::No);
        #    datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        #    datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        #    datatype.parmWizardHighest(#MAXSEQRANGE);
        #    datatype.parmSortField(5);
        #
        #    datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        #    this.create(datatype);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #PayrollPretEdit
  PROPERTIES
    Name                #PayrollPretEdit
    Origin              #{4B0576BB-347A-4DED-AAB8-C6348DE5BAB5}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #close
      #public void close()
      #{ //Raffraichir le form père
      #    #Task
      #    FormRun formRun;
      #    formRun = element.args().caller();
      #    if(formRun)
      #    {
      #        formRun.task(#taskF5);
      #    }
      #    super();
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #PayrollPret
          Table               #PayrollPret
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #715827882
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Body
          ElementPosition     #1431655764
          Style               #BorderlessGridContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Details
          ElementPosition     #1610612734
          HierarchyParent     #Body
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Left
          ElementPosition     #1073741822
          HierarchyParent     #Details
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Right
          ElementPosition     #1610612734
          HierarchyParent     #Details
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #PayrollPret_HcmWorker
          AllowEdit           #No
          ElementPosition     #536870910
          HierarchyParent     #Left
          DataSource          #PayrollPret
          ReferenceField      #HcmWorker
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #PayrollPret_PayrollPretEtablissementPayeur
          ElementPosition     #1342177275
          HierarchyParent     #Left
          DataSource          #PayrollPret
          ReferenceField      #PayrollPretEtablissementPayeur
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #PayrollPret_PayrollPretObjet
          ElementPosition     #1073741820
          HierarchyParent     #Left
          DataSource          #PayrollPret
          ReferenceField      #PayrollPretObjet
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #PayrollPret_PayrollPretType
          ElementPosition     #805306365
          HierarchyParent     #Left
          DataSource          #PayrollPret
          ReferenceField      #PayrollPretType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #PayrollPret_Status
          ElementPosition     #1968526675
          HierarchyParent     #Right
          DataSource          #PayrollPret
          DataField           #Status
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #PayrollPret_NbEcheances
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1073741823
          HierarchyParent     #Right
          DataSource          #PayrollPret
          DataField           #NbEcheances
        ENDPROPERTIES
        
        METHODS
          SOURCE #textChange
            #public void textChange()
            #
            #{
            #    super();
            #    if( PayrollPret_NbEcheances.value() !=0 )
            #    {
            #  Echeance.realValue( (PayrollPret_Montant.realValue() + PayrollPret_Montant.realValue() * ( PayrollPret_TauxInteret.realValue() /100 )) / PayrollPret_NbEcheances.value() ) ; }
            #
            # }
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #Echeance
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1789569705
          HierarchyParent     #Right
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPret_Montant
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #715827882
          HierarchyParent     #Right
          DataSource          #PayrollPret
          DataField           #Montant
        ENDPROPERTIES
        
        METHODS
          SOURCE #textChange
            #public void textChange()
            #
            #{
            #    super();
            #    if( PayrollPret_NbEcheances.value() !=0 )
            #    {
            #  Echeance.realValue( (PayrollPret_Montant.realValue() + PayrollPret_Montant.realValue() * ( PayrollPret_TauxInteret.realValue() /100 )) / PayrollPret_NbEcheances.value() ) ; }
            #
            # }
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPret_TauxInteret
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1431655764
          HierarchyParent     #Right
          DataSource          #PayrollPret
          DataField           #TauxInteret
        ENDPROPERTIES
        
        METHODS
          SOURCE #textChange
            #public void textChange()
            #
            #{
            #    super();
            #    if( PayrollPret_NbEcheances.value() !=0 )
            #    {
            #  Echeance.realValue( (PayrollPret_Montant.realValue() + PayrollPret_Montant.realValue() * ( PayrollPret_TauxInteret.realValue() /100 )) / PayrollPret_NbEcheances.value() ) ; }
            #
            # }
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #StringEdit
          ElementPosition     #1073741822
          HierarchyParent     #Body
          Text                #Prêt :
          Style               #TitleField
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL UTCDATETIMEEDIT
        PROPERTIES
          Name                #PayrollPret_DateOctroit
          ElementPosition     #1610612730
          HierarchyParent     #Left
          DataSource          #PayrollPret
          DataField           #DateOctroit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL UTCDATETIMEEDIT
        PROPERTIES
          Name                #PayrollPret_DatePremiereEcheance
          AllowEdit           #No
          ElementPosition     #1879048188
          HierarchyParent     #Left
          DataSource          #PayrollPret
          DataField           #DatePremiereEcheance
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #PayrollTabAmortissement
  PROPERTIES
    Name                #PayrollTabAmortissement
    Origin              #{43DF38E2-B178-4DFA-AF46-D3ED6B1D3D95}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #close
      #public void close()
      #{
      #
      # #Task
      # FormRun formRun;
      #
      #    //Raffréchir le form père
      #    formRun = element.args().caller();
      #    if(formRun)
      #    {
      #        formRun.task(#taskF5);
      #    }
      #    super();
      #
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #PayrollPretAmortissements
          Table               #PayrollPretAmortissements
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #displayOption
          #public void displayOption(Common _record, FormRowDisplayOption _options)
          #{
          #    // les echances payé en bleue
          #
          #    PayrollPretAmortissements amortissement;
          #    Amortissement = _record ;
          #
          #    if(Amortissement.isPayed)
          #    {
          #       _options.backColor(16761281);
          #    }
          #    super(_record, _options);
          #
          #
          #}
        ENDSOURCE
        SOURCE #active
          #public int active()
          #{
          #    int ret;
          #
          #    ret = super();
          #    //Griser les echeances encaissées
          #    payrollPretAmortissements_ds.object(fieldNum(payrollPretAmortissements,Annuite)).allowEdit( ! payrollPretAmortissements.isPayed);
          #    payrollPretAmortissements_ds.object(fieldNum(payrollPretAmortissements,CapitalRetDu)).allowEdit( ! payrollPretAmortissements.isPayed);
          #    payrollPretAmortissements_ds.object(fieldNum(payrollPretAmortissements,CapitalDu)).allowEdit( ! payrollPretAmortissements.isPayed);
          #    payrollPretAmortissements_ds.object(fieldNum(payrollPretAmortissements,Interet)).allowEdit( ! payrollPretAmortissements.isPayed);
          #    payrollPretAmortissements_ds.object(fieldNum(payrollPretAmortissements,Numero)).allowEdit( ! payrollPretAmortissements.isPayed);
          #    payrollPretAmortissements_ds.object(fieldNum(payrollPretAmortissements,CapitalAmorti)).allowEdit( ! payrollPretAmortissements.isPayed);
          #    payrollPretAmortissements_ds.object(fieldNum(payrollPretAmortissements,TotalAmorti)).allowEdit( ! payrollPretAmortissements.isPayed);
          #    payrollPretAmortissements_ds.object(fieldNum(payrollPretAmortissements,Date)).allowEdit( ! payrollPretAmortissements.isPayed);
          #    return ret;
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #PayrollPret
          Table               #PayrollPret
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
    PARTREFERENCE #PartReference1
      PROPERTIES
        Name                #PartReference1
        MenuItemName        #PayrollPretInfos
        DataSource          #PayrollPretAmortissements
        DataSourceRelation  #PayrollPretAmortissements.Relation1
        ElementPosition     #1073741823
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #715827882
          DataSource          #PayrollPretAmortissements
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
          Caption             #Actions
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #Actions
          ElementPosition     #1073741822
          HierarchyParent     #ActionPaneTab
          Caption             #Actions
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #Rembourser
          ElementPosition     #1610612733
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          AutoDeclaration     #Yes
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #Body
          DataSource          #PayrollPretAmortissements
          GridLinesStyle      #Vertical
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Body
          ElementPosition     #1431655764
          Style               #BorderlessGridContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL CHECKBOX
        PROPERTIES
          Name                #PayrollPretAmortissements_isPayed
          ElementPosition     #2040109461
          HierarchyParent     #Grid
          BackgroundColor     #Window background
          DataSource          #PayrollPretAmortissements
          DataField           #isPayed
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Partiel
          ElementPosition     #1610612733
          HierarchyParent     #Rembourser
          Text                #Partiel
          NormalImage         #10694
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          Primary             #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    PayrollPretAmortissements amortissements_Update , amortissement_Spotter;
            #    PayrollPret pret;
            #    MultiSelectionHelper helper = MultiSelectionHelper::construct();
            #    Dialog dialog = new Dialog("Remboursement partiel");
            #    DialogField dialogRadio = dialog.addField(enumStr(PayrollPretRemboursementType));
            #    DialogField dialogMontantAmortit = dialog.addField(extendedTypeStr(Amount));
            #    boolean reach = false ;
            #    int num,
            #        nbEcheances,
            #        compteur = 1,
            #        derniereEcheance;
            #
            #    real valEcheance,capitalDU,capitalRetDu,capitalAmortit,interet,TotalAmortit,totalAmortitPred;
            #    super();
            #    dialogMontantAmortit.label ( "Montant remboursé : " );
            #    dialogRadio.label("Opération : ");
            #    dialog.run();
            #
            #
            #    if(dialog.run())
            #    {   helper.parmDatasource(PayrollPretAmortissements_DS);
            #        amortissements_Update = helper.getFirst();
            #
            #
            #         //selection du prêt en question
            #
            #        select forUpdate  pret
            #        where pret.RecId == amortissements_Update.PayrollPret;
            #
            #
            #
            #        if( pret.Status != PayrollPretStatus :: Solde )
            #
            #        {
            #            while select * from amortissements_Update
            #            order by amortissements_Update.Numero desc
            #            where amortissements_Update.PayrollPret == pret.RecId
            #            {
            #                if(amortissements_Update.isPayed)
            #
            #                    {
            #                      reach = true;
            #                      break;
            #                    }
            #
            #                amortissement_Spotter  =  amortissements_Update;
            #            }
            #         totalAmortitPred = amortissement_Spotter.TotalAmorti;
            #
            #
            #             num = (amortissement_Spotter.Numero + 1);
            #
            #         select forUpdate amortissements_Update
            #         where amortissements_Update.PayrollPret == pret.RecId
            #            && amortissements_Update.Numero == num ;
            #
            #     //1er choix Même échances
            #
            #    if( dialogRadio.value() == PayrollPretRemboursementType :: MemeEcheance )
            #    {
            #
            #         //calcul nombre echeances réstantes
            #         capitalDu = amortissements_Update.CapitalDu;
            #
            #   if(capitalDU >= dialogMontantAmortit.value())
            #   {
            #
            #       if(pret.TauxInteret == 0)
            #            { if(pret.NbEcheances !=0)
            #
            #                {valEcheance = pret.Montant / pret.NbEcheances;}
            #
            #            }
            #         else
            #            {
            #             valEcheance = PayrollPretCalculateEcheancier::annuite(pret.Montant,pret.TauxInteret,pret.NbEcheances) ; }
            #             if(valEcheance != 0)
            #             {
            #                nbEcheances = ( capitalDU - dialogMontantAmortit.value() ) div valEcheance;
            #             }
            #             else
            #             {
            #                nbEcheances = 0 ;
            #             }
            #        if ( nbEcheances * valEcheance < capitalDU - dialogMontantAmortit.value() )
            #             {    nbEcheances++; }
            #
            #
            #        //effacement des écheances et mise à jours des échances
            #        capitalDU = capitalDU - dialogMontantAmortit.value() ;
            #        interet = PayrollPretCalculateEcheancier::interet(capitalDU,pret.TauxInteret);
            #        capitalAmortit = valEcheance - interet ;
            #        capitalRetDu = capitalDU - capitalAmortit ;
            #        TotalAmortit = amortissements_Update.TotalAmorti + dialogMontantAmortit.value() ;
            #
            #        if(nbEcheances == 1)
            #                {
            #                    capitalAmortit = capitalDU - interet ;
            #                    valEcheance= capitalAmortit + interet ;
            #                    capitalRetDu = capitalDU - capitalAmortit ;
            #                    TotalAmortit = TotalAmortit + capitalAmortit ;
            #
            #                    amortissements_Update.Annuite=valEcheance ;
            #                    amortissements_Update.CapitalDu = capitalDU ;
            #                    amortissements_Update.CapitalAmorti = capitalAmortit ;
            #                    amortissements_Update.CapitalRetDu = capitalRetDu ;
            #                    amortissements_Update.TotalAmorti = pret.Montant ;
            #
            #                    ttsBegin;
            #                    amortissements_Update.update();
            #                    ttsCommit;
            #
            #                     while
            #                        select forUpdate amortissements_Update
            #                        where amortissements_Update.PayrollPret == pret.RecId
            #                        && amortissements_Update.Numero > num
            #
            #                    {
            #                     ttsBegin;
            #                     amortissements_Update.delete();
            #                     ttsCommit;
            #                    }
            #                }
            #         else
            #       {
            #        while
            #        select forUpdate amortissements_Update
            #        where amortissements_Update.PayrollPret == pret.RecId
            #            && amortissements_Update.Numero >= num
            #            {
            #
            #
            #                if(compteur <= nbEcheances)
            #                {
            #                    amortissements_Update.Annuite=valEcheance ;
            #                    amortissements_Update.CapitalDu = capitalDU ;
            #                    amortissements_Update.CapitalAmorti = capitalAmortit ;
            #                    amortissements_Update.CapitalRetDu = capitalRetDu ;
            #                    amortissements_Update.TotalAmorti = TotalAmortit ;
            #                    derniereEcheance = amortissements_Update.Numero;
            #                    capitalDU=capitalRetDu;
            #                    interet = PayrollPretCalculateEcheancier::interet(capitalDU,pret.TauxInteret);
            #                    //reste dérniere echeance ..
            #                    if( compteur < nbEcheances - 1)
            #                    {capitalAmortit = valEcheance - interet ;}
            #                    else
            #                    {
            #                    capitalAmortit = capitalDU - interet ;
            #                    valEcheance= capitalAmortit + interet ;
            #                    }
            #                    capitalRetDu = capitalDU - capitalAmortit ;
            #                    TotalAmortit = TotalAmortit + capitalAmortit  ;
            #                ttsBegin;
            #                amortissements_Update.update();
            #                ttsCommit;
            #
            #                }
            #
            #                else
            #                {
            #                ttsBegin;
            #                amortissements_Update.delete() ;
            #                ttsCommit;
            #                }
            #            compteur ++ ;
            #            }
            #
            #        }
            #
            #            pret.MontantAmorti +=  dialogMontantAmortit.value() ;
            #            pret.MontantRestant -=  dialogMontantAmortit.value() ;
            #            pret.NbEcheances = derniereEcheance ;
            #       ttsBegin;
            #       pret.update();
            #       ttsCommit;
            #            }
            #
            #    else
            #       {
            #
            #  info("Ce montant est supérieur au capital dû ! Opération échouée ") ;
            #
            #       }
            #
            #            }
            #
            #   // 2eme choix même nombre d'échéances
            #
            #       else
            #
            #          {
            #
            #      capitalDu = amortissements_Update.CapitalDu;
            #
            #      if(capitalDU >= dialogMontantAmortit.value())
            #
            #        {
            #           capitalDu = capitalDU - dialogMontantAmortit.value();
            #           nbEcheances = pret.NbEcheances - num + 1 ;
            #           capitalDu = amortissements_Update.CapitalDu - dialogMontantAmortit.value();
            #           if( pret.TauxInteret > 0 )
            #              {
            #                 valEcheance = PayrollPretCalculateEcheancier::annuite ( capitalDu , pret.TauxInteret , nbEcheances );
            #              }
            #           else
            #              {
            #                 valEcheance = capitalDU / nbEcheances;
            #              }
            #
            #           interet = PayrollPretCalculateEcheancier::interet(capitalDU,pret.TauxInteret) ;
            #           capitalAmortit = valEcheance - interet ;
            #           capitalRetDu = capitalDu - capitalAmortit ;
            #           TotalAmortit = pret.Montant - capitalDU  + ( valEcheance - interet );
            #
            #            while
            #              select forUpdate amortissements_Update
            #              where amortissements_Update.PayrollPret == pret.RecId
            #                &&  amortissements_Update.Numero >= num
            #              {
            #                  amortissements_Update.CapitalDu = capitalDU ;
            #                  amortissements_Update.Annuite = valEcheance ;
            #                  amortissements_Update.Interet = interet ;
            #                  amortissements_Update.CapitalAmorti = capitalAmortit ;
            #                  amortissements_Update.CapitalRetDu = capitalRetDu ;
            #                  amortissements_Update.TotalAmorti = TotalAmortit ;
            #                  ttsBegin;
            #                  amortissements_Update.update();
            #                  ttsCommit;
            #
            #                  capitalDU=capitalRetDu;
            #                  interet = PayrollPretCalculateEcheancier::interet(capitalDU,pret.TauxInteret);
            #                  capitalAmortit = valEcheance - interet ;
            #                  capitalRetDu = capitalDU - capitalAmortit ;
            #                  TotalAmortit = TotalAmortit + capitalAmortit  ;
            #              }
            #
            #            pret.MontantAmorti +=  dialogMontantAmortit.value() ;
            #            pret.MontantRestant -=  dialogMontantAmortit.value() ;
            #
            #            ttsBegin;
            #            pret.update();
            #            ttsCommit;
            #
            #              }
            #
            #
            #    else
            #       {
            #
            #             info("Ce montant est supérieur au capital dû ! Opération échouée ") ;
            #
            #
            #       }
            #
            #              }
            #
            #        }
            #
            #        else
            #        {info("Le prêt est déjà soldé !");}
            #
            #    }
            #PayrollPretAmortissements_DS.executeQuery();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Report
          ElementPosition     #1431655764
          HierarchyParent     #Actions
          Text                #Reporter
          NormalImage         #12849
          ImageLocation       #EmbeddedResource
          MultiSelect         #No
          Big                 #Yes
          Command             #2875
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #
            #    PayrollPretAmortissements amortissements,amortissements_Update;
            #    MultiSelectionHelper helper = MultiSelectionHelper::construct();
            #    Dialog dialog = new Dialog("Nombre de mois décalés");
            #    DialogField dialogNbMois = dialog.addField(extendedTypeStr(Integer));
            #    super();
            #    dialogNbMois.label ( "Nombre de mois : " );
            #    dialog.run();
            #    if(dialog.run())
            #    {
            #    helper.parmDatasource(PayrollPretAmortissements_DS);
            #    amortissements = helper.getFirst();
            #
            #    if( ! amortissements.isPayed && dialogNbMois.value())
            #
            #        {
            #
            #    while select forUpdate amortissements_Update
            #    where amortissements_Update.Numero >= amortissements.Numero
            #       && amortissements_Update.PayrollPret == amortissements.PayrollPret
            #    {
            #    amortissements_Update.Date = DateTimeUtil::addMonths(amortissements_Update.Date,dialogNbMois.value());
            #    ttsBegin;
            #    amortissements_Update.update();
            #    ttsCommit;
            #    }
            #    // actualisation du grid ..
            #    amortissements_Update = PayrollPretAmortissements_ds.getFirst();
            #    while(amortissements_Update)
            #    {
            #     amortissements_Update = PayrollPretAmortissements_ds.getNext();
            #     amortissements_Update.reread();
            #    }
            #    info("Echéancier décalé");
            #    }
            #    else if( amortissements.isPayed )
            #    {
            #    info("L'echéance que vous voulez décaler est déjà encaissée : décalage impossible !");
            #    }
            #
            #    }
            #    PayrollPretAmortissements_DS.executeQuery();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Total
          ElementPosition     #1073741822
          HierarchyParent     #Rembourser
          Text                #Total
          NormalImage         #10693
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          Primary             #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    PayrollPretAmortissements  amortissements_Update;
            #    PayrollPret  pret , pret_Update;
            #    MultiSelectionHelper  helper = MultiSelectionHelper::construct();
            #    Dialog dialog = new Dialog("Confirmez le remboursement total ");
            #    dialog.addImage(3413);
            #    dialog.addText(" ête vous sur de vouloir rembourser ce(s) prêt(s) ?");
            #
            #    dialog.run();
            #    if(dialog.run())
            #    {
            #    helper.parmDatasource(PayrollPretAmortissements_DS);
            #    amortissements_Update = helper.getFirst();
            #
            #    //selection du prêt en question
            #
            #    select forUpdate pret
            #    where pret.RecId == amortissements_Update.PayrollPret;
            #
            #    while(pret.RecId !=0)
            #        {
            #    if( pret.Status != PayrollPretStatus :: Solde)
            #
            #        {
            #            while select forUpdate  amortissements_Update
            #            where amortissements_Update.isPayed == NoYes :: No
            #               && amortissements_Update.PayrollPret == pret.RecId
            #            {
            #                amortissements_Update.isPayed = NoYes :: Yes;
            #                amortissements_Update.isRembourse = NoYes :: Yes;
            #
            #                select forUpdate pret_Update
            #                where pret_Update.RecId == pret.RecId ;
            #
            #                pret_Update.Status = PayrollPretStatus :: Solde;
            #                pret_Update.MontantAmorti = pret_Update.Montant;
            #                pret_Update.MontantRestant = 0 ;
            #                ttsBegin;
            #                pret_Update.update();
            #                amortissements_Update.update();
            #                ttsCommit;
            #            }
            #        }
            #    else if (pret.Status == PayrollPretStatus :: Solde)
            #        {
            #         info("Le prêt N° "+pret.MatriculePret+" est déjà soldé !");
            #        }
            #      pret = helper.getNext();
            #        }
            #
            #    }
            # PayrollPretAmortissements_DS.executeQuery();
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #PayrollPretAmortissements_Numero
          ElementPosition     #429496728
          HierarchyParent     #Grid
          DataSource          #PayrollPretAmortissements
          DataField           #Numero
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPretAmortissements_Annuite
          ElementPosition     #1503238548
          HierarchyParent     #Grid
          DataSource          #PayrollPretAmortissements
          DataField           #Annuite
        ENDPROPERTIES
        
        METHODS
          SOURCE #modified
            #public boolean modified()
            #{
            #    boolean ret;
            #    PayrollPretAmortissements amortissements;
            #    PayrollPret pret ;
            #    PayrollPretCalculateEcheancier calculate = new PayrollPretCalculateEcheancier();
            #    real annuitePred = PayrollPretAmortissements.Annuite ,
            #         valEcheance,
            #         capitalDU = PayrollPretAmortissements.CapitalDu ,
            #         capitalRetDu = PayrollPretAmortissements.CapitalRetDu ,
            #         capitalAmortit ,
            #         interet,
            #         TotalAmortit = PayrollPretAmortissements.TotalAmorti,
            #         difference ,
            #         capitalAmortitPred ;
            #    int  nbEcheances ;
            #
            #    ret = super();
            #
            #    //selection du pêt
            #
            #        select * from pret
            #        where pret.RecId == PayrollPretAmortissements.PayrollPret ;
            #
            #    if( PayrollPretAmortissements.CapitalDu > ( PayrollPretAmortissements.Annuite - PayrollPretAmortissements.Interet ) && PayrollPretAmortissements.Numero < pret.NbEcheances)
            #    {
            #
            #
            #
            #        //Actualisation de la première ligne
            #
            #        capitalAmortitPred = PayrollPretAmortissements.CapitalAmorti ;
            #        capitalDu = PayrollPretAmortissements.CapitalDu ;
            #        capitalAmortit = PayrollPretAmortissements.Annuite - PayrollPretAmortissements.Interet ;
            #        difference = capitalAmortit - capitalAmortitPred ;
            #        capitalRetDu -= difference ;
            #        TotalAmortit += difference ;
            #
            #        PayrollPretAmortissements.CapitalAmorti = capitalAmortit ;
            #        PayrollPretAmortissements.CapitalRetDu = capitalRetDu ;
            #        PayrollPretAmortissements.TotalAmorti = TotalAmortit ;
            #
            #        //Calcul du réste des échéances
            #
            #           nbEcheances = pret.NbEcheances - PayrollPretAmortissements.Numero ;
            #           capitalDu = capitalRetDu ;
            #           if( pret.TauxInteret > 0 )
            #              {
            #                 valEcheance = PayrollPretCalculateEcheancier::annuite ( capitalDu , pret.TauxInteret , nbEcheances );
            #              }
            #           else
            #              {
            #                 valEcheance = capitalDU / nbEcheances;
            #              }
            #
            #           interet = PayrollPretCalculateEcheancier::interet(capitalDU,pret.TauxInteret) ;
            #           capitalAmortit = valEcheance - interet ;
            #           capitalRetDu = capitalDu - capitalAmortit ;
            #           TotalAmortit = pret.Montant - capitalDU  + ( valEcheance - interet );
            #
            #            while
            #              select forUpdate amortissements
            #              where amortissements.PayrollPret == pret.RecId
            #                &&  amortissements.Numero > PayrollPretAmortissements.Numero
            #              {
            #                  amortissements.CapitalDu = capitalDU ;
            #                  amortissements.Annuite = valEcheance ;
            #                  amortissements.Interet = interet ;
            #                  amortissements.CapitalAmorti = capitalAmortit ;
            #                  amortissements.CapitalRetDu = capitalRetDu ;
            #                  amortissements.TotalAmorti = TotalAmortit ;
            #                  ttsBegin;
            #                  amortissements.update();
            #                  ttsCommit;
            #
            #                  capitalDU=capitalRetDu;
            #                  interet = PayrollPretCalculateEcheancier::interet(capitalDU,pret.TauxInteret);
            #                  capitalAmortit = valEcheance - interet ;
            #                  capitalRetDu = capitalDU - capitalAmortit ;
            #                  TotalAmortit = TotalAmortit + capitalAmortit  ;
            #              }
            #    }
            #    else
            #    {   if ( PayrollPretAmortissements.Numero == pret.NbEcheances )
            #        {
            #            info("La dérniere annuité ne peux pas être modifiée !");
            #        }
            #        else
            #        {
            #        info("Valeur érronée !");
            #        }
            #        PayrollPretAmortissements.Annuite = annuitePred;
            #    }
            #
            #    //Refresh..
            #
            #    PayrollPretAmortissements_DS.executeQuery();
            #
            #    return ret;
            #
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPretAmortissements_CapitalAmorti
          AllowEdit           #No
          ElementPosition     #1073741820
          HierarchyParent     #Grid
          DataSource          #PayrollPretAmortissements
          DataField           #CapitalAmorti
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPretAmortissements_CapitalDu
          AllowEdit           #No
          ElementPosition     #858993456
          HierarchyParent     #Grid
          DataSource          #PayrollPretAmortissements
          DataField           #CapitalDu
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPretAmortissements_CapitalRetDu
          AllowEdit           #No
          ElementPosition     #1682195519
          HierarchyParent     #Grid
          DataSource          #PayrollPretAmortissements
          DataField           #CapitalRetDu
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPretAmortissements_Interet
          AllowEdit           #No
          ElementPosition     #1288490184
          HierarchyParent     #Grid
          DataSource          #PayrollPretAmortissements
          DataField           #Interet
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPretAmortissements_TotalAmorti
          AllowEdit           #No
          ElementPosition     #1861152490
          HierarchyParent     #Grid
          DataSource          #PayrollPretAmortissements
          DataField           #TotalAmorti
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL UTCDATETIMEEDIT
        PROPERTIES
          Name                #PayrollPretAmortissements_Date
          AllowEdit           #No
          ElementPosition     #644245092
          HierarchyParent     #Grid
          DataSource          #PayrollPretAmortissements
          DataField           #Date
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #PayrollPret
  PROPERTIES
    Name                #PayrollPret
    Origin              #{D506A1B2-DC70-47D9-A1C8-E3A353089FC9}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
    SOURCE #close
      #public void close()
      #{ //Raffraichir le form père
      #    #Task
      #    FormRun formRun;
      #    formRun = element.args().caller();
      #    if(formRun)
      #    {
      #        formRun.task(#taskF5);
      #    }
      #    super();
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #PayrollPret
          Table               #PayrollPret
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #PayrollPretAmortissements
          Table               #PayrollPretAmortissements
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #536870911
          Caption             #Prêt
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
          Caption             #Prêt
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #NewPret
          Visible             #No
          ElementPosition     #1073741822
          HierarchyParent     #ActionPaneTab
          Caption             #Prêt
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ViewEcheanchier
          ElementPosition     #1610612733
          HierarchyParent     #ActionPaneTab
          Caption             #Echéancier
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Body
          ElementPosition     #1342177278
          Style               #BorderlessGridContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Details
          AutoDeclaration     #Yes
          ElementPosition     #1610612733
          HierarchyParent     #Body
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DetailsLeft
          ElementPosition     #1073741822
          HierarchyParent     #Details
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #DetailsRight
          ElementPosition     #1610612734
          HierarchyParent     #Details
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #PayrollPret_HcmWorker
          ElementPosition     #613566756
          HierarchyParent     #DetailsLeft
          DataSource          #PayrollPret
          ReferenceField      #HcmWorker
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #PayrollPret_PayrollPretEtablissementPayeur
          ElementPosition     #1533916890
          HierarchyParent     #DetailsLeft
          DataSource          #PayrollPret
          ReferenceField      #PayrollPretEtablissementPayeur
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #PayrollPret_PayrollPretObjet
          ElementPosition     #1227133512
          HierarchyParent     #DetailsLeft
          DataSource          #PayrollPret
          ReferenceField      #PayrollPretObjet
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #PayrollPret_PayrollPretType
          ElementPosition     #920350134
          HierarchyParent     #DetailsLeft
          DataSource          #PayrollPret
          ReferenceField      #PayrollPretType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #CreerPret
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #NewPret
          Text                #Créer prêt
          NormalImage         #11045
          ImageLocation       #EmbeddedResource
          Big                 #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #
            #    int i  ;
            #    utcDateTime dateEcheance = PayrollPret.DatePremiereEcheance ;
            #    real capitalDu  =  PayrollPret.Montant ,
            #    capitalAmorti  ,
            #    totalAmortit ,
            #    annuite  ,
            #    interet  ;
            #
            #
            #    super();
            #    if(PayrollPret.DatePremiereEcheance >= PayrollPret.DateOctroit || PayrollPret.Montant != 0)
            #    {
            #    PayrollPret.MatriculePret = NumberSeq::newGetNum(PayrollPret::numRefMatPret(),true).num();
            #    PayrollPret.MontantRestant = PayrollPret.Montant ;
            #    if( PayrollPret.TauxInteret == 0 )
            #    {
            #
            #        for( i=0 ; i < PayrollPret.NbEcheances ; i++ ) // avec taux d'interet
            #    {
            #    capitalAmorti = PayrollPret.Montant / PayrollPret.NbEcheances ;
            #    payrollPretAmortissements.Numero = i + 1 ;
            #    payrollPretAmortissements.PayrollPret = PayrollPret.RecId ;
            #    payrollPretAmortissements.Date = dateEcheance;
            #    payrollPretAmortissements.isPayed = NoYes :: No;
            #    dateEcheance = DateTimeUtil::addMonths(dateEcheance,1);
            #    payrollPretAmortissements.CapitalDu = capitalDu;
            #    payrollPretAmortissements.CapitalAmorti = capitalAmorti ;
            #    capitalDu = capitalDu - capitalAmorti ;
            #    totalAmortit = totalAmortit + capitalAmorti ;
            #    payrollPretAmortissements.CapitalRetDu = capitalDu ;
            #    payrollPretAmortissements.Annuite = capitalAmorti ;
            #    payrollPretAmortissements.TotalAmorti = totalAmortit ;
            #    payrollPretAmortissements.insert();
            #     }
            #   }
            #   else
            #            // sans taux d'interet
            #    {
            #        annuite = PayrollPretCalculateecheancier::annuite ( capitalDu , PayrollPret.TauxInteret , PayrollPret.NbEcheances ) ;
            #        for( i=0 ; i < PayrollPret.NbEcheances ; i++ )
            #        {
            #        payrollPretAmortissements.Numero = i + 1 ;
            #        payrollPretAmortissements.PayrollPret = PayrollPret.RecId ;
            #        PayrollPretAmortissements.Date = dateEcheance;
            #        dateEcheance = DateTimeUtil::addMonths(dateEcheance,1);
            #        payrollPretAmortissements.isPayed = NoYes :: No ;
            #        payrollPretAmortissements.CapitalDu = capitalDu ;
            #        payrollPretAmortissements.Annuite = annuite ;
            #        interet = PayrollPretCalculateecheancier::interet( capitalDu , PayrollPret.TauxInteret);
            #        payrollPretAmortissements.Interet = interet ;
            #        payrollPretAmortissements.CapitalAmorti = annuite - interet ;
            #        PayrollPretAmortissements.CapitalRetDu = capitalDu - ( annuite - interet ) ;
            #        totalAmortit += ( annuite - interet ) ;
            #        payrollPretAmortissements.TotalAmorti = totalAmortit ;
            #        capitalDu -= ( annuite - interet ) ;
            #        payrollPretAmortissements.insert();
            #        }
            #    }
            #
            #
            #
            #   if(PayrollPret.RecId != 0 )// désactivation du form après insertion
            #   {
            #   CreerPret.enabled(false);
            #   ViewEcheanicer.enabled(true);
            #   Details.enabled(false);
            #   }
            #
            #
            #    }
            # }
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL INTEDIT
        PROPERTIES
          Name                #PayrollPret_NbEcheances
          AutoDeclaration     #Yes
          ElementPosition     #1073741823
          HierarchyParent     #DetailsRight
          DataSource          #PayrollPret
          DataField           #NbEcheances
        ENDPROPERTIES
        
        METHODS
          SOURCE #textChange
            #public void textChange()
            #
            #{
            #    PayrollPretCalculateEcheancier calculate = new PayrollPretCalculateEcheancier();
            #    super();
            #    if( PayrollPret_NbEcheances.value() !=0 )
            #    {
            #        if(PayrollPret_TauxInteret.realValue() == 0 )
            #        {
            #                Echeance.realValue( (PayrollPret_Montant1.realValue() + PayrollPret_Montant1.realValue() * ( PayrollPret_TauxInteret.realValue() /100 )) / PayrollPret_NbEcheances.value() ) ;
            #        }
            #        else
            #        {
            #        Echeance.realValue( PayrollPretCalculateEcheancier::annuite(PayrollPret_Montant1.realValue(),PayrollPret_TauxInteret.realValue(),PayrollPret_NbEcheances.value() ) );
            #        }
            #    }
            # }
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ViewEcheanicer
          AutoDeclaration     #Yes
          Visible             #No
          Enabled             #No
          ElementPosition     #1431655764
          HierarchyParent     #ViewEcheanchier
          Text                #Echéancier
          NormalImage         #10829
          ImageLocation       #EmbeddedResource
          Big                 #Yes
          MenuItemName        #PayrollPretView
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #Echeance
          AutoDeclaration     #Yes
          AllowEdit           #No
          ElementPosition     #1789569705
          HierarchyParent     #DetailsRight
          Label               #Echéance
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPret_Montant1
          AutoDeclaration     #Yes
          ElementPosition     #715827882
          HierarchyParent     #DetailsRight
          DataSource          #PayrollPret
          DataField           #Montant
        ENDPROPERTIES
        
        METHODS
          SOURCE #textChange
            #public void textChange()
            #
            #{
            #
            #    super();
            #    if( PayrollPret_NbEcheances.value() !=0 )
            #    {
            #        if(PayrollPret_TauxInteret.realValue() == 0 )
            #        {
            #                Echeance.realValue( (PayrollPret_Montant1.realValue() + PayrollPret_Montant1.realValue() * ( PayrollPret_TauxInteret.realValue() /100 )) / PayrollPret_NbEcheances.value() ) ;
            #        }
            #        else
            #        {
            #        Echeance.realValue( PayrollPretCalculateEcheancier::annuite(PayrollPret_Montant1.realValue(),PayrollPret_TauxInteret.realValue(),PayrollPret_NbEcheances.value() ) );
            #        }
            #    }
            #
            # }
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPret_TauxInteret
          AutoDeclaration     #Yes
          ElementPosition     #1431655764
          HierarchyParent     #DetailsRight
          DataSource          #PayrollPret
          DataField           #TauxInteret
        ENDPROPERTIES
        
        METHODS
          SOURCE #textChange
            #public void textChange()
            #
            #{
            #    PayrollPretCalculateEcheancier calculate = new PayrollPretCalculateEcheancier();
            #    super();
            #    if( PayrollPret_NbEcheances.value() !=0 )
            #    {
            #        if(PayrollPret_TauxInteret.realValue() == 0 )
            #        {
            #                Echeance.realValue( (PayrollPret_Montant1.realValue() + PayrollPret_Montant1.realValue() * ( PayrollPret_TauxInteret.realValue() /100 )) / PayrollPret_NbEcheances.value() ) ;
            #        }
            #        else
            #        {
            #        Echeance.realValue( PayrollPretCalculateEcheancier::annuite(PayrollPret_Montant1.realValue(),PayrollPret_TauxInteret.realValue(),PayrollPret_NbEcheances.value() ) );
            #        }
            #    }
            #
            # }
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #StringEdit
          ElementPosition     #1073741822
          HierarchyParent     #Body
          Text                #Prêt :
          Label               #Prêt :
          Style               #TitleField
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL UTCDATETIMEEDIT
        PROPERTIES
          Name                #PayrollPret_DateOctroit
          ElementPosition     #1764004423
          HierarchyParent     #DetailsLeft
          DataSource          #PayrollPret
          DataField           #DateOctroit
        ENDPROPERTIES
        
        METHODS
          SOURCE #timeTextChange
            #public void timeTextChange()
            #{
            #    super();
            #    if(PayrollPret.DateOctroit > PayrollPret.DatePremiereEcheance && PayrollPret.DatePremiereEcheance != utcDateTimeNull())
            #    {
            #    info("Les dates sont inchoérentes");
            #    PayrollPret.DateOctroit = utcDateTimeNull();
            #    }
            #    PayrollPret_DS.refresh();
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL UTCDATETIMEEDIT
        PROPERTIES
          Name                #PayrollPret_DatePremiereEcheance
          ElementPosition     #1955744034
          HierarchyParent     #DetailsLeft
          DataSource          #PayrollPret
          DataField           #DatePremiereEcheance
        ENDPROPERTIES
        
        METHODS
          SOURCE #timeTextChange
            #public void timeTextChange()
            #{
            #    super();
            #    if (PayrollPret.DatePremiereEcheance < PayrollPret.DateOctroit && PayrollPret.DateOctroit!= utcDateTimeNull() && PayrollPret.DatePremiereEcheance != utcDateTimeNull())
            #    {
            #       info("les dates sont incohérentes") ;
            #        PayrollPret.DatePremiereEcheance=utcDateTimeNull();
            #        PayrollPret_DS.refresh();
            #    }
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
      TABLE #PayrollPret
        PROPERTIES
          Table               #PayrollPret
          EffectiveAccess     #Read
        ENDPROPERTIES
        
      ENDTABLE
      
    TABLE #PayrollPretAmortissements
      PROPERTIES
        Table               #PayrollPretAmortissements
        EffectiveAccess     #Read
      ENDPROPERTIES
      
    ENDTABLE
    
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #PayrollPretEtablissementPayeur
  PROPERTIES
    Name                #PayrollPretEtablissementPayeur
    Origin              #{3FC0BA7B-33FD-41D4-B91E-3400924D3263}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #PayrollPretEtablissementPayeur
          Table               #PayrollPretEtablissementPayeur
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #715827882
          Style               #Strip
          DataSource          #PayrollPretEtablissementPayeur
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #Group
          DataSource          #PayrollPretEtablissementPayeur
          GridLinesStyle      #Vertical
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Body
          ElementPosition     #1431655764
          Style               #MarginlessContainer
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Details
          ElementPosition     #1610612733
          HierarchyParent     #Body
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Group
          ElementPosition     #1073741822
          HierarchyParent     #Body
          Style               #BorderlessGridContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Delete
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup
          Text                #Supprimer
          ButtonDisplay       #Text & Image left
          NormalImage         #10121
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #New
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          ButtonDisplay       #Text & Image left
          NormalImage         #11045
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPretEtablissementPayeur_Code
          ElementPosition     #1073741822
          HierarchyParent     #Grid
          DataSource          #PayrollPretEtablissementPayeur
          DataField           #Code
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPretEtablissementPayeur_Code1
          ElementPosition     #1073741822
          HierarchyParent     #Details
          DataSource          #PayrollPretEtablissementPayeur
          DataField           #Code
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPretEtablissementPayeur_Intitule
          ElementPosition     #1610612733
          HierarchyParent     #Grid
          DataSource          #PayrollPretEtablissementPayeur
          DataField           #Intitule
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPretEtablissementPayeur_Intitule1
          ElementPosition     #1610612733
          HierarchyParent     #Details
          DataSource          #PayrollPretEtablissementPayeur
          DataField           #Intitule
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #PayrollPretObjet
  PROPERTIES
    Name                #PayrollPretObjet
    Origin              #{D98839D6-9D73-4953-8110-D62048AD092D}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #PayrollPretObjet
          Table               #PayrollPretObjet
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #715827882
          Style               #Strip
          DataSource          #PayrollPretObjet
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid1
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #Grid
          DataSource          #PayrollPretObjet
          GridLinesStyle      #Vertical
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Details
          ElementPosition     #1610612733
          HierarchyParent     #Group
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Grid
          ElementPosition     #1073741822
          HierarchyParent     #Group
          Style               #BorderlessGridContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Group
          ElementPosition     #1431655764
          Style               #MarginlessContainer
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Delete
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup
          Text                #Supprimer
          ButtonDisplay       #Text & Image left
          NormalImage         #10121
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          Primary             #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #New
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          ButtonDisplay       #Text & Image left
          NormalImage         #11045
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPretObjet_Code
          ElementPosition     #1073741822
          HierarchyParent     #Grid1
          DataSource          #PayrollPretObjet
          DataField           #Code
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPretObjet_Code1
          ElementPosition     #1073741822
          HierarchyParent     #Details
          DataSource          #PayrollPretObjet
          DataField           #Code
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPretObjet_Intitule
          ElementPosition     #1610612733
          HierarchyParent     #Grid1
          DataSource          #PayrollPretObjet
          DataField           #Intitule
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPretObjet_Intitule1
          ElementPosition     #1610612733
          HierarchyParent     #Details
          DataSource          #PayrollPretObjet
          DataField           #Intitule
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #PayrollPretListPage
  PROPERTIES
    Name                #PayrollPretListPage
    Origin              #{E89720E8-9B68-4CA4-B6D9-EBB0812104F5}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #PayrollPret
          Table               #PayrollPret
          AllowEdit           #No
          AllowCreate         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
        SOURCE #init
          #public void init()
          #{
          #
          #    super();
          #
          #}
        ENDSOURCE
      ENDMETHODS
    ENDDATASOURCE
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #PayrollPretAmortissements
          Table               #PayrollPretAmortissements
          AllowEdit           #No
          AllowCreate         #No
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
    PARTREFERENCE #PayrollPretInfos
      PROPERTIES
        Name                #PayrollPretInfos
        MenuItemName        #PayrollPretInfos
        DataSource          #PayrollPret
        DataSourceRelation  #SelfLink
        ElementPosition     #1073741823
      ENDPROPERTIES
      
    ENDPARTREFERENCE
    
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
      Caption             #Liste des prêts
      UseCaptionFromMenuItem  #Yes
      Style               #ListPage
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          VerticalSpacing     #0
          ElementPosition     #536870911
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
          Caption             #Prêts
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #Actions
          ElementPosition     #1533916890
          HierarchyParent     #ActionPaneTab
          Caption             #Actions
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #MaintainGroup
          ElementPosition     #920350134
          HierarchyParent     #ActionPaneTab
          Caption             #Tenir à jour
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #NewGroup
          Width               #Column width
          ElementPosition     #613566756
          HierarchyParent     #ActionPaneTab
          Caption             #Nouveau
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #RefreshGroup
          ElementPosition     #1227133512
          HierarchyParent     #ActionPaneTab
          Caption             #Actualiser
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #Repay
          Width               #Column width
          Height              #Column height
          ElementPosition     #1840700268
          HierarchyParent     #ActionPaneTab
          Caption             #Rembourser
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid
          AllowEdit           #No
          Width               #Column width
          Height              #Column height
          ElementPosition     #1610612733
          DataSource          #PayrollPret
          DefaultAction       #ViewButton
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Filter
          ElementPosition     #1073741822
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #PayrollPret_HcmWorker
          ElementPosition     #286331151
          HierarchyParent     #Grid
          DataSource          #PayrollPret
          ReferenceField      #HcmWorker
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REFERENCEGROUP
        PROPERTIES
          Name                #PayrollPret_PayrollPretType
          ElementPosition     #381774868
          HierarchyParent     #Grid
          DataSource          #PayrollPret
          ReferenceField      #PayrollPretType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMBOBOX
        PROPERTIES
          Name                #PayrollPret_Status
          ElementPosition     #477218586
          HierarchyParent     #Grid
          DataSource          #PayrollPret
          DataField           #Status
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Activer
          HelpText            #Reactiver
          ElementPosition     #858993458
          HierarchyParent     #Actions
          Text                #Activer
          NormalImage         #10789
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          Primary             #Yes
          NeedsRecord         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #PayrollPret pret;
            #MultiSelectionHelper helper = MultiSelectionHelper::construct();
            #PayrollPret pret_update;
            #helper.parmDatasource(PayrollPret_DS);
            #pret = helper.getFirst();
            #while(pret.RecId != 0)
            # {
            #  if(pret.Status == PayrollPretStatus :: Arrete )
            #  {
            #  pret.Status = PayrollPretStatus :: EnCours   ;
            #  select forUpdate pret_update
            #  where pret.RecId == pret_update.RecId;
            #  ttsBegin;
            #  pret_update.update();
            #  ttsCommit;
            #  }
            #  else if(pret.Status == PayrollPretStatus :: Solde)
            #   {
            #       info("Le prêt N° "+pret.MatriculePret+" est déjà soldé !");
            #   }
            #  pret = helper.getNext();
            # }
            #PayrollPret_DS.refresh();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Delete
          ElementPosition     #1717986916
          HierarchyParent     #MaintainGroup
          Text                #Supprimer
          ButtonDisplay       #Text & Image left
          NormalImage         #10121
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          SaveRecord          #No
          MultiSelect         #Yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Partial
          ElementPosition     #1610612733
          HierarchyParent     #Repay
          Text                #Partiel   
          NormalImage         #10694
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          MultiSelect         #No
          Big                 #Yes
          NeedsRecord         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    PayrollPretAmortissements amortissements_Update , amortissement_Spotter;
            #    PayrollPret pret;
            #    MultiSelectionHelper helper = MultiSelectionHelper::construct();
            #    Dialog dialog = new Dialog("Remboursement partiel");
            #    DialogField dialogRadio = dialog.addField(enumStr(PayrollPretRemboursementType));
            #    DialogField dialogMontantAmortit = dialog.addField(extendedTypeStr(Amount));
            #    boolean reach = false ;
            #    int num,
            #        nbEcheances,
            #        compteur = 1,
            #        derniereEcheance;
            #    real valEcheance,capitalDU,capitalRetDu,capitalAmortit,interet,TotalAmortit,totalAmortitPred;
            #    super();
            #    dialogMontantAmortit.label ( "Montant remboursé : " );
            #    dialogRadio.label("Opération : ");
            #    dialog.run();
            #
            #
            #    if(dialog.run())
            #    {   helper.parmDatasource(PayrollPret_DS);
            #        pret = helper.getFirst();
            #        if( pret.Status != PayrollPretStatus :: Solde )
            #
            #        {
            #            while select * from amortissements_Update
            #            order by amortissements_Update.Numero desc
            #            where amortissements_Update.PayrollPret == pret.RecId
            #            {
            #                if(amortissements_Update.isPayed)
            #                    {
            #                      reach = true;
            #                      break;
            #                    }
            #
            #                amortissement_Spotter  =  amortissements_Update;
            #
            #            }
            #         totalAmortitPred = amortissement_Spotter.TotalAmorti;
            #         num = (amortissement_Spotter.Numero + 1);
            #         select forUpdate amortissements_Update
            #         where amortissements_Update.PayrollPret == pret.RecId
            #            && amortissements_Update.Numero == num ;
            #
            #     //1er coix Même échances
            #
            #    if( dialogRadio.value() ==PayrollPretRemboursementType :: MemeEcheance )
            #    {
            #
            #         //calcul nombre echeances réstantes
            #         capitalDu = amortissements_Update.CapitalDu;
            #   if(capitalDU > dialogMontantAmortit.value())
            #   {
            #
            #       if(pret.TauxInteret == 0)
            #            {valEcheance = pret.Montant / pret.NbEcheances;}
            #         else
            #            {valEcheance = PayrollPretCalculateEcheancier::annuite(pret.Montant,pret.TauxInteret,pret.NbEcheances) ; }
            #           nbEcheances = ( capitalDU - dialogMontantAmortit.value() ) div valEcheance;
            #
            #        if ( nbEcheances * valEcheance < capitalDU - dialogMontantAmortit.value() )
            #             {    nbEcheances++; }
            #
            #
            #        //effacement des écheances et mise à jours des échances
            #        capitalDU = capitalDU - dialogMontantAmortit.value() ;
            #        interet = PayrollPretCalculateEcheancier::interet(capitalDU,pret.TauxInteret);
            #        capitalAmortit = valEcheance - interet ;
            #        capitalRetDu = capitalDU - capitalAmortit ;
            #        TotalAmortit = amortissements_Update.TotalAmorti + dialogMontantAmortit.value() ;
            #
            #        if(nbEcheances == 1)
            #                {
            #                    capitalAmortit = capitalDU - interet ;
            #                    valEcheance= capitalAmortit + interet ;
            #                    capitalRetDu = capitalDU - capitalAmortit ;
            #                    TotalAmortit = TotalAmortit + capitalAmortit ;
            #                    amortissements_Update.Annuite=valEcheance ;
            #                    amortissements_Update.CapitalDu = capitalDU ;
            #                    amortissements_Update.CapitalAmorti = capitalAmortit ;
            #                    amortissements_Update.CapitalRetDu = capitalRetDu ;
            #                    amortissements_Update.TotalAmorti = pret.Montant ;
            #                    ttsBegin;
            #                    amortissements_Update.update();
            #                    ttsCommit;
            #
            #                     while
            #                        select forUpdate amortissements_Update
            #                        where amortissements_Update.PayrollPret == pret.RecId
            #                        && amortissements_Update.Numero > num
            #                    {
            #                     ttsBegin;
            #                     amortissements_Update.delete();
            #                     ttsCommit;
            #                    }
            #                }
            #         else
            #       {
            #        while
            #        select forUpdate amortissements_Update
            #        where amortissements_Update.PayrollPret == pret.RecId
            #            && amortissements_Update.Numero >= num
            #            {
            #
            #
            #                if(compteur <= nbEcheances)
            #                {
            #                    amortissements_Update.Annuite=valEcheance ;
            #                    amortissements_Update.CapitalDu = capitalDU ;
            #                    amortissements_Update.CapitalAmorti = capitalAmortit ;
            #                    amortissements_Update.CapitalRetDu = capitalRetDu ;
            #                    amortissements_Update.TotalAmorti = TotalAmortit ;
            #                    derniereEcheance = amortissements_Update.Numero;
            #                    capitalDU=capitalRetDu;
            #                    interet = PayrollPretCalculateEcheancier::interet(capitalDU,pret.TauxInteret);
            #                    //reste dérniere echeance ..
            #                    if( compteur < nbEcheances - 1)
            #                    {capitalAmortit = valEcheance - interet ;}
            #                    else
            #                    {
            #                    capitalAmortit = capitalDU - interet ;
            #                    valEcheance= capitalAmortit + interet ;
            #                    }
            #                    capitalRetDu = capitalDU - capitalAmortit ;
            #                    TotalAmortit = TotalAmortit + capitalAmortit  ;
            #                ttsBegin;
            #                amortissements_Update.update();
            #                ttsCommit;
            #
            #                }
            #
            #                else
            #                {
            #                ttsBegin;
            #                amortissements_Update.delete() ;
            #                ttsCommit;
            #                }
            #            compteur ++ ;
            #            }
            #
            #        }
            #
            #            pret.MontantAmorti +=  dialogMontantAmortit.value() ;
            #            pret.MontantRestant -=  dialogMontantAmortit.value() ;
            #            pret.NbEcheances = derniereEcheance ;
            #       ttsBegin;
            #       pret.update();
            #       ttsCommit;
            #            }
            #
            #    else
            #       {
            #
            #  info("Ce montant est supérieur au capital dû ! Opération échouée ") ;
            #
            #       }
            #
            #            }
            #
            #   // 2eme choix même nombre d'échéances
            #
            #       else
            #
            #          {
            #
            #      capitalDu = amortissements_Update.CapitalDu;
            #
            #      if(capitalDU > dialogMontantAmortit.value())
            #
            #        {
            #           capitalDu = capitalDU - dialogMontantAmortit.value();
            #           nbEcheances = pret.NbEcheances - num + 1 ;
            #           capitalDu = amortissements_Update.CapitalDu - dialogMontantAmortit.value();
            #           if( pret.TauxInteret > 0 )
            #              {
            #                 valEcheance = PayrollPretCalculateEcheancier::annuite ( capitalDu , pret.TauxInteret , nbEcheances );
            #              }
            #           else
            #              {
            #                 valEcheance = capitalDU / nbEcheances;
            #              }
            #
            #           interet = PayrollPretCalculateEcheancier::interet(capitalDU,pret.TauxInteret) ;
            #           capitalAmortit = valEcheance - interet ;
            #           capitalRetDu = capitalDu - capitalAmortit ;
            #           TotalAmortit = pret.Montant - capitalDU  + ( valEcheance - interet );
            #
            #            while
            #              select forUpdate amortissements_Update
            #              where amortissements_Update.PayrollPret == pret.RecId
            #                &&  amortissements_Update.Numero >= num
            #              {
            #                  amortissements_Update.CapitalDu = capitalDU ;
            #                  amortissements_Update.Annuite = valEcheance ;
            #                  amortissements_Update.Interet = interet ;
            #                  amortissements_Update.CapitalAmorti = capitalAmortit ;
            #                  amortissements_Update.CapitalRetDu = capitalRetDu ;
            #                  amortissements_Update.TotalAmorti = TotalAmortit ;
            #                  ttsBegin;
            #                  amortissements_Update.update();
            #                  ttsCommit;
            #
            #                  capitalDU=capitalRetDu;
            #                  interet = PayrollPretCalculateEcheancier::interet(capitalDU,pret.TauxInteret);
            #                  capitalAmortit = valEcheance - interet ;
            #                  capitalRetDu = capitalDU - capitalAmortit ;
            #                  TotalAmortit = TotalAmortit + capitalAmortit  ;
            #              }
            #
            #            pret.MontantAmorti +=  dialogMontantAmortit.value() ;
            #            pret.MontantRestant -=  dialogMontantAmortit.value() ;
            #
            #            ttsBegin;
            #            pret.update();
            #            ttsCommit;
            #
            #              }
            #
            #
            #    else
            #       {
            #
            #             info("Ce montant est supérieur au capital dû ! Opération échouée ") ;
            #
            #
            #       }
            #
            #              }
            #
            #        }
            #
            #        else
            #        {info("Le prêt est déjà soldé !");}
            #
            #    }
            #
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Refresh
          ElementPosition     #1431655764
          HierarchyParent     #RefreshGroup
          NormalImage         #11437
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          Command             #2875
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Reporter
          ElementPosition     #1717986916
          HierarchyParent     #Actions
          Text                #Reporter
          NormalImage         #12849
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          NeedsRecord         #Yes
          Command             #2875
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    PayrollPretAmortissements amortissements_Update;
            #    PayrollPret pret;
            #    MultiSelectionHelper helper = MultiSelectionHelper::construct();
            #    Dialog dialog = new Dialog("Nombre de mois décalés");
            #    DialogField dialogNbMois = dialog.addField(extendedTypeStr(Integer));
            #    super();
            #    dialogNbMois.label ( "Nombre de mois : " );
            #    dialog.run();
            #    if(dialog.run())
            #    {
            #    helper.parmDatasource(PayrollPret_DS);
            #    pret = helper.getFirst();
            #    while(pret.RecId !=0)
            #        {
            #    if( pret.Status != PayrollPretStatus :: Solde && dialogNbMois.value())
            #
            #        {
            #            while select forUpdate  amortissements_Update
            #            order by Numero desc
            #               where amortissements_Update.PayrollPret == pret.RecId
            #
            #            {
            #                if(amortissements_Update.isPayed == NoYes ::Yes || amortissements_Update.isRembourse == NoYes::Yes)
            #                {
            #                    break;
            #                }
            #                amortissements_Update.Date = DateTimeUtil::addMonths(amortissements_Update.Date,dialogNbMois.value());
            #                ttsBegin;
            #                amortissements_Update.update();
            #                ttsCommit;
            #            }
            #        }
            #    else if (pret.Status == PayrollPretStatus :: Solde)
            #        {
            #         info("Le prêt N° "+pret.MatriculePret+" que vous voulez reporter est déjà soldé !");
            #        }
            #      pret = helper.getNext();
            #        }
            #
            #    }
            # PayrollPretAmortissements_DS.refresh();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Stop
          HelpText            #Arrêter
          ElementPosition     #1288490187
          HierarchyParent     #Actions
          Text                #Arrêter
          NormalImage         #12098
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          Primary             #Yes
          NeedsRecord         #Yes
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #PayrollPret pret;
            #MultiSelectionHelper helper = MultiSelectionHelper::construct();
            #PayrollPret pret_update;
            #helper.parmDatasource(PayrollPret_DS);
            #pret = helper.getFirst();
            #while(pret.RecId != 0)
            # {
            #  if(pret.Status == PayrollPretStatus :: EnCours)
            # {
            #  pret.Status = PayrollPretStatus :: Arrete   ;
            #  select forUpdate pret_update
            #  where pret.RecId == pret_update.RecId;
            #  ttsBegin;
            #  pret_update.update();
            #  ttsCommit;
            #     }
            #  else if(pret.Status == PayrollPretStatus :: Solde)
            #   {
            #       info("Le prêt N° "+pret.MatriculePret+" est déjà soldé !");
            #   }
            #  pret = helper.getNext();
            # }
            #PayrollPret_DS.refresh();
            #}
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Total
          Width               #Column width
          ElementPosition     #1073741822
          HierarchyParent     #Repay
          Text                #Total   
          NormalImage         #10693
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          Primary             #Yes
          NeedsRecord         #Yes
          Command             #2875
        ENDPROPERTIES
        
        METHODS
          SOURCE #clicked
            #void clicked()
            #{
            #    PayrollPretAmortissements  amortissements_Update;
            #    PayrollPret  pret , pret_Update;
            #    MultiSelectionHelper  helper = MultiSelectionHelper::construct();
            #    Dialog dialog = new Dialog("Confirmez le remboursement total ");
            #    dialog.addImage(3413);
            #    dialog.addText(" ête vous sur de vouloir rembourser ce(s) prêt(s) ?");
            #
            #    dialog.run();
            #    if(dialog.run())
            #    {
            #    helper.parmDatasource(PayrollPret_DS);
            #    pret = helper.getFirst();
            #    while(pret.RecId !=0)
            #        {
            #    if( pret.Status != PayrollPretStatus :: Solde)
            #
            #        {
            #            while select forUpdate  amortissements_Update
            #            where amortissements_Update.isPayed == NoYes :: No
            #               && amortissements_Update.PayrollPret == pret.RecId
            #            {
            #                amortissements_Update.isPayed = NoYes :: Yes;
            #                amortissements_Update.isRembourse = NoYes :: Yes;
            #
            #                select forUpdate pret_Update
            #                where pret_Update.RecId == pret.RecId ;
            #
            #                pret_Update.Status = PayrollPretStatus :: Solde;
            #                pret_Update.MontantAmorti = pret_Update.Montant;
            #                pret_Update.MontantRestant = 0 ;
            #                ttsBegin;
            #                pret_Update.update();
            #                amortissements_Update.update();
            #                ttsCommit;
            #            }
            #        }
            #    else if (pret.Status == PayrollPretStatus :: Solde)
            #        {
            #         info("Le prêt N° "+pret.MatriculePret+" est déjà soldé !");
            #        }
            #      pret = helper.getNext();
            #        }
            #         PayrollPret_DS.refresh();
            #    }
            # payrollPret_DS.reread();
            # payrollPret_DS.refresh();
            #}
            #
          ENDSOURCE
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #Edit
          ElementPosition     #858993458
          HierarchyParent     #MaintainGroup
          Text                #Modifier
          NormalImage         #10040
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          Big                 #Yes
          Primary             #Yes
          NeedsRecord         #Yes
          OpenMode            #Edit
          CopyCallerQuery     #Yes
          MenuItemName        #PayrollPretEdit
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #New
          HelpText            #Creation d'un nouveau prêt
          ElementPosition     #1431655764
          HierarchyParent     #NewGroup
          Text                #Génerer un nouveau prêt
          ButtonDisplay       #Text & Image above
          NormalImage         #12832
          ImageLocation       #EmbeddedResource
          ShowShortCut        #No
          MultiSelect         #Yes
          Big                 #Yes
          Primary             #Yes
          OpenMode            #New
          CopyCallerQuery     #Yes
          MenuItemName        #PayrollPret
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL MENUITEMBUTTON
        PROPERTIES
          Name                #ViewButton
          Visible             #No
          ElementPosition     #1288490187
          HierarchyParent     #MaintainGroup
          ShowShortCut        #No
          DataSource          #PayrollPret
          CopyCallerQuery     #No
          MenuItemName        #PayrollPretView
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPret_Montant
          AutoDeclaration     #Yes
          ElementPosition     #572662304
          HierarchyParent     #Grid
          DataSource          #PayrollPret
          DataField           #Montant
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPret_MontantAmorti
          ElementPosition     #1861152492
          HierarchyParent     #Grid
          DataSource          #PayrollPret
          DataField           #MontantAmorti
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL REALEDIT
        PROPERTIES
          Name                #PayrollPret_MontantRestant
          ElementPosition     #2004318069
          HierarchyParent     #Grid
          DataSource          #PayrollPret
          DataField           #MontantRestant
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPret_MatriculePret
          ElementPosition     #190887434
          HierarchyParent     #Grid
          DataSource          #PayrollPret
          DataField           #MatriculePret
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
      TABLE #PayrollPret
        PROPERTIES
          Table               #PayrollPret
          EffectiveAccess     #Read
        ENDPROPERTIES
        
      ENDTABLE
      
  ENDTABLES
  
SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: FRM

; Microsoft Dynamics AX Forms unloaded
; --------------------------------------------------------------------------------
FRMVERSION 12

FORM #PayrollPretType
  PROPERTIES
    Name                #PayrollPretType
    Origin              #{6C86D6A2-505D-4E90-B34D-4A4072ABC389}
  ENDPROPERTIES
  
  METHODS
    SOURCE #classDeclaration
      #public class FormRun extends ObjectRun
      #{
      #}
    ENDSOURCE
  ENDMETHODS
  OBJECTBANK
    PROPERTIES
    ENDPROPERTIES
    
    DATASOURCE
      OBJECTPOOL
        PROPERTIES
          Name                #PayrollPretType
          Table               #PayrollPretType
        ENDPROPERTIES
        
        FIELDLIST
        ENDFIELDLIST
      ENDOBJECTPOOL
      METHODS
      ENDMETHODS
    ENDDATASOURCE
  ENDOBJECTBANK
  
  REFERENCEDATASOURCES
  ENDREFERENCEDATASOURCES
  
  JOINS
  ENDJOINS
  
  PARTREFERENCES
  ENDPARTREFERENCES
  
  DESIGN
    PROPERTIES
    ENDPROPERTIES
    
    CONTAINER
      CONTROL ACTIONPANE
        PROPERTIES
          Name                #ActionPane
          ElementPosition     #715827882
          Style               #Strip
          DataSource          #PayrollPretType
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL ACTIONPANETAB
        PROPERTIES
          Name                #ActionPaneTab
          ElementPosition     #1431655764
          HierarchyParent     #ActionPane
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL BUTTONGROUP
        PROPERTIES
          Name                #ButtonGroup
          ElementPosition     #1431655764
          HierarchyParent     #ActionPaneTab
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GRID
        PROPERTIES
          Name                #Grid1
          Width               #Column width
          Height              #Column height
          ElementPosition     #1431655764
          HierarchyParent     #Grid
          DataSource          #PayrollPretType
          GridLinesStyle      #Vertical
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #body
          ElementPosition     #1431655764
          FrameType           #Edged 3D Line
          Style               #MarginlessContainer
          Columns             #2
          ArrangeGuide        
            ARRAY INDEX Columns 
              #0
              #0
            ENDARRAY
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Details
          ElementPosition     #1610612733
          HierarchyParent     #body
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL GROUP
        PROPERTIES
          Name                #Grid
          ElementPosition     #1073741822
          HierarchyParent     #body
          Style               #BorderlessGridContainer
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #Delete
          ElementPosition     #1610612733
          HierarchyParent     #ButtonGroup
          Text                #Supprimer
          ButtonDisplay       #Text & Image left
          NormalImage         #10121
          ImageLocation       #EmbeddedResource
          SaveRecord          #No
          KeyTip              #yes
          Command             #2832
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL COMMANDBUTTON
        PROPERTIES
          Name                #New
          ElementPosition     #1073741822
          HierarchyParent     #ButtonGroup
          ButtonDisplay       #Text & Image left
          NormalImage         #11045
          ImageLocation       #EmbeddedResource
          Primary             #Yes
          Command             #260
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPretType_Code
          ElementPosition     #1073741822
          HierarchyParent     #Grid1
          DataSource          #PayrollPretType
          DataField           #Code
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPretType_Code1
          Width               #Column width
          ElementPosition     #1073741822
          HierarchyParent     #Details
          DataSource          #PayrollPretType
          DataField           #Code
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPretType_Intitule
          ElementPosition     #1610612733
          HierarchyParent     #Grid1
          DataSource          #PayrollPretType
          DataField           #Intitule
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
      CONTROL STRINGEDIT
        PROPERTIES
          Name                #PayrollPretType_Intitule1
          ElementPosition     #1610612733
          HierarchyParent     #Details
          DataSource          #PayrollPretType
          DataField           #Intitule
        ENDPROPERTIES
        
        METHODS
        ENDMETHODS
      ENDCONTROL 
      
    ENDCONTAINER
    
  ENDDESIGN
  
  PERMISSIONS #Permissions
    PROPERTIES
    ENDPROPERTIES
    
    PERMISSIONSET #Read
      PROPERTIES
      ENDPROPERTIES
      
      FORM #Controls
      ENDFORM
      
    TABLES #Tables
    ENDTABLES
    
  SERVERMETHODS #Server Methods
  ENDSERVERMETHODS
  
ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Update
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Create
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

PERMISSIONSET #Delete
  PROPERTIES
  ENDPROPERTIES
  
  FORM #Controls
  ENDFORM
  
TABLES #Tables
ENDTABLES

SERVERMETHODS #Server Methods
ENDSERVERMETHODS

ASSOCIATEDFORMS #Associated Forms
ENDASSOCIATEDFORMS

ENDPERMISSIONSET

ENDPERMISSIONS

ENDFORM


***Element: DBE

; Microsoft Dynamics AX Enumtype : PayrollPretRemboursementType unloaded
; --------------------------------------------------------------------------------
  ENUMTYPEVERSION 1
  
  ENUMTYPE #PayrollPretRemboursementType
    PROPERTIES
      Name                #PayrollPretRemboursementType
      Style               #Radio button
      UseEnumValue        #Yes
      Origin              #{5228E53F-EE1F-4862-8442-16293D187C68}
    ENDPROPERTIES
    
    TYPEELEMENTS
      #MemeEcheance
      PROPERTIES
        Name                #MemeEcheance
        Label               #Même valeur échance
        EnumValue           #0
      ENDPROPERTIES
      
      #MemeNb
      PROPERTIES
        Name                #MemeNb
        Label               #Même nombre d'échéances
        EnumValue           #1
      ENDPROPERTIES
      
    ENDTYPEELEMENTS
  ENDENUMTYPE
  

***Element: DBE

; Microsoft Dynamics AX Enumtype : PayrollPretStatus unloaded
; --------------------------------------------------------------------------------
  ENUMTYPEVERSION 1
  
  ENUMTYPE #PayrollPretStatus
    PROPERTIES
      Name                #PayrollPretStatus
      UseEnumValue        #Yes
      Origin              #{03B9C045-5425-483A-BC94-1064D71DE604}
    ENDPROPERTIES
    
    TYPEELEMENTS
      #EnCours
      PROPERTIES
        Name                #EnCours
        Label               #En cours
        EnumValue           #0
      ENDPROPERTIES
      
      #Solde
      PROPERTIES
        Name                #Solde
        Label               #Soldé
        EnumValue           #1
      ENDPROPERTIES
      
      #Arrete
      PROPERTIES
        Name                #Arrete
        Label               #Arrêté
        EnumValue           #2
      ENDPROPERTIES
      
    ENDTYPEELEMENTS
  ENDENUMTYPE
  

***Element: PRN

; Microsoft Dynamics AX Project : PayrollGestionDePret unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #PayrollGestionDePret
  PRIVATE
  PROPERTIES
    Name                #PayrollGestionDePret
    Origin              #{3BF774A5-71DA-4B28-83D3-BED6A108BD06}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Query
      PROPERTIES
        Name                #Query
        ProjectGroupType    #All
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 20
        UTILOBJECTID 0
        NODETYPE 330
        NAME #PayrollPretListPage_EnCours
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 20
        UTILOBJECTID 0
        NODETYPE 330
        NAME #PayrollPretListPage_Arrete
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 20
        UTILOBJECTID 0
        NODETYPE 330
        NAME #PayrollPretListPage_solde
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 20
        UTILOBJECTID 0
        NODETYPE 330
        NAME #PayrollPretInfo
      ENDNODE
      ENDGROUP
      
    GROUP #infoparts
      PROPERTIES
        Name                #infoparts
        ProjectGroupType    #InfoParts
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 81
        UTILOBJECTID 0
        NODETYPE 1429
        NAME #PayrollPret
      ENDNODE
      ENDGROUP
      
    GROUP #Menu
      PROPERTIES
        Name                #Menu
        ProjectGroupType    #All
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 16
        UTILOBJECTID 0
        NODETYPE 205
        NAME #Payroll
      ENDNODE
      ENDGROUP
      
    GROUP #Menu Items
      PROPERTIES
        Name                #Menu Items
        ProjectGroupType    #All
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 1
        UTILOBJECTID 0
        NODETYPE 296
        NAME #PayrollPretListPage_Soldes
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 1
        UTILOBJECTID 0
        NODETYPE 296
        NAME #PayrollPretListPage_EnCours
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 1
        UTILOBJECTID 0
        NODETYPE 296
        NAME #PayrollPretListPage_Arretes
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 1
        UTILOBJECTID 0
        NODETYPE 296
        NAME #PayrollPretInfos
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 1
        UTILOBJECTID 0
        NODETYPE 296
        NAME #PayrollPretEdit
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 1
        UTILOBJECTID 0
        NODETYPE 296
        NAME #PayrollPretView
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 1
        UTILOBJECTID 0
        NODETYPE 296
        NAME #PayrollPret
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 1
        UTILOBJECTID 0
        NODETYPE 296
        NAME #PayrollPretListPage
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 1
        UTILOBJECTID 0
        NODETYPE 296
        NAME #PayrollPretEtablissementPayeur
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 1
        UTILOBJECTID 0
        NODETYPE 296
        NAME #PayrollPretObjet
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 1
        UTILOBJECTID 0
        NODETYPE 296
        NAME #PayrollPretType
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 103676
        NODETYPE 204
        NAME #PayrollPret
      ENDNODE
      ENDGROUP
      
    GROUP #EDT
      PROPERTIES
        Name                #EDT
        ProjectGroupType    #ExtendedDataTypes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 41
        UTILOBJECTID 103765
        NODETYPE 234
        NAME #PayrollPretId
      ENDNODE
      ENDGROUP
      
    GROUP #Tables
      PROPERTIES
        Name                #Tables
        ProjectGroupType    #Tables
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 103677
        NODETYPE 204
        NAME #PayrollPretAmortissements
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 103676
        NODETYPE 204
        NAME #PayrollPret
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 103678
        NODETYPE 204
        NAME #PayrollPretEtablissementPayeur
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 103679
        NODETYPE 204
        NAME #PayrollPretObjet
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 44
        UTILOBJECTID 103680
        NODETYPE 204
        NAME #PayrollPretType
      ENDNODE
      ENDGROUP
      
    GROUP #Jobs
      PROPERTIES
        Name                #Jobs
        ProjectGroupType    #All
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #insertTaxTN
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #CreerReferenceSouche
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #clearpret
      ENDNODE
      ENDGROUP
      
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1023877
        NODETYPE 329
        NAME #PayrollPretCalculateEcheancier
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1016638
        NODETYPE 329
        NAME #PayrollPayStatementGenerationTask
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1016473
        NODETYPE 329
        NAME #NumberSeqModulePayroll
      ENDNODE
      ENDGROUP
      
    GROUP #Forms
      PROPERTIES
        Name                #Forms
        ProjectGroupType    #Forms
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #PayrollPretEdit
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #PayrollTabAmortissement
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #PayrollPret
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #PayrollPretEtablissementPayeur
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #PayrollPretObjet
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #PayrollPretListPage
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 11
        UTILOBJECTID 0
        NODETYPE 201
        NAME #PayrollPretType
      ENDNODE
      ENDGROUP
      
    GROUP #Enum Types
      PROPERTIES
        Name                #Enum Types
        ProjectGroupType    #BaseEnums
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 40
        UTILOBJECTID 101244
        NODETYPE 209
        NAME #PayrollPretRemboursementType
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 40
        UTILOBJECTID 101245
        NODETYPE 209
        NAME #PayrollPretStatus
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
